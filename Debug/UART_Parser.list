
UART_Parser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003434  08003434  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800343c  0800343c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001dc  08003620  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08003620  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ebc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e0  00000000  00000000  000280c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  000297a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  00029e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205c4  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006687  00000000  00000000  0004aa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c25da  00000000  00000000  000510bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002150  00000000  00000000  00113710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800323c 	.word	0x0800323c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800323c 	.word	0x0800323c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_UART_RxCpltCallback+0x1c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d101      	bne.n	8000594 <HAL_UART_RxCpltCallback+0x14>
	{
	parser_uart_callback();
 8000590:	f000 f8d6 	bl	8000740 <parser_uart_callback>
	}
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000208 	.word	0x20000208

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa5c 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f808 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f88e 	bl	80006cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f862 	bl	8000678 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  parser_init();
 80005b4:	f000 f8b6 	bl	8000724 <parser_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x18>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f842 	bl	8002654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd57 	bl	80010e0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f870 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ffb2 	bl	80015c0 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f85b 	bl	800071c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART1_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006b0:	f001 f952 	bl	8001958 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f82f 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000208 	.word	0x20000208
 80006c8:	40011000 	.word	0x40011000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000722:	e7fe      	b.n	8000722 <Error_Handler+0x6>

08000724 <parser_init>:
uint8_t rx_index =0;

GPS_t GPS;

void parser_init()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	4903      	ldr	r1, [pc, #12]	; (8000738 <parser_init+0x14>)
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <parser_init+0x18>)
 800072e:	f001 f960 	bl	80019f2 <HAL_UART_Receive_IT>

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001f8 	.word	0x200001f8
 800073c:	20000208 	.word	0x20000208

08000740 <parser_uart_callback>:

void parser_uart_callback()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if(rx_data != 'n' && rx_index < sizeof(rx_buffer))
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <parser_uart_callback+0x4c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b6e      	cmp	r3, #110	; 0x6e
 800074a:	d00b      	beq.n	8000764 <parser_uart_callback+0x24>
	{
		rx_buffer[rx_index++] = rx_data;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <parser_uart_callback+0x50>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	b2d1      	uxtb	r1, r2
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <parser_uart_callback+0x50>)
 8000756:	7011      	strb	r1, [r2, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <parser_uart_callback+0x4c>)
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <parser_uart_callback+0x54>)
 8000760:	5499      	strb	r1, [r3, r2]
 8000762:	e00b      	b.n	800077c <parser_uart_callback+0x3c>

	}
	else
	{
		parser((char*) rx_buffer);
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <parser_uart_callback+0x54>)
 8000766:	f000 f819 	bl	800079c <parser>
		rx_index = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <parser_uart_callback+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer,0, sizeof(rx_buffer));
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	2100      	movs	r1, #0
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <parser_uart_callback+0x54>)
 8000778:	f001 ff6c 	bl	8002654 <memset>

	}

	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	4903      	ldr	r1, [pc, #12]	; (800078c <parser_uart_callback+0x4c>)
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <parser_uart_callback+0x58>)
 8000782:	f001 f936 	bl	80019f2 <HAL_UART_Receive_IT>

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001f8 	.word	0x200001f8
 8000790:	200001f9 	.word	0x200001f9
 8000794:	200002a0 	.word	0x200002a0
 8000798:	20000208 	.word	0x20000208

0800079c <parser>:

void parser(char *strparse)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af08      	add	r7, sp, #32
 80007a2:	6078      	str	r0, [r7, #4]
if(!strncmp(strparse, "$GPGGA",6))
 80007a4:	2206      	movs	r2, #6
 80007a6:	4911      	ldr	r1, [pc, #68]	; (80007ec <parser+0x50>)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f001 ff87 	bl	80026bc <strncmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d117      	bne.n	80007e4 <parser+0x48>
{
	if(sscanf(strparse,"$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units)>=1) // @suppress("Float formatting support")
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <parser+0x54>)
 80007b6:	9307      	str	r3, [sp, #28]
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <parser+0x58>)
 80007ba:	9306      	str	r3, [sp, #24]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <parser+0x5c>)
 80007be:	9305      	str	r3, [sp, #20]
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <parser+0x60>)
 80007c2:	9304      	str	r3, [sp, #16]
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <parser+0x64>)
 80007c6:	9303      	str	r3, [sp, #12]
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <parser+0x68>)
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <parser+0x6c>)
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <parser+0x70>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <parser+0x74>)
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <parser+0x78>)
 80007d8:	490f      	ldr	r1, [pc, #60]	; (8000818 <parser+0x7c>)
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f001 ff42 	bl	8002664 <siscanf>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
	{
			return;
	}
}
}
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08003254 	.word	0x08003254
 80007f0:	20000274 	.word	0x20000274
 80007f4:	20000270 	.word	0x20000270
 80007f8:	2000026c 	.word	0x2000026c
 80007fc:	20000268 	.word	0x20000268
 8000800:	20000264 	.word	0x20000264
 8000804:	20000261 	.word	0x20000261
 8000808:	20000254 	.word	0x20000254
 800080c:	20000260 	.word	0x20000260
 8000810:	20000258 	.word	0x20000258
 8000814:	2000025c 	.word	0x2000025c
 8000818:	0800325c 	.word	0x0800325c

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_UART_MspInit+0x94>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d134      	bne.n	80008f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_UART_MspInit+0x98>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <HAL_UART_MspInit+0x98>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_UART_MspInit+0x98>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_UART_MspInit+0x98>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x98>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_UART_MspInit+0x98>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d8:	2307      	movs	r3, #7
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_UART_MspInit+0x9c>)
 80008e4:	f000 fa62 	bl	8000dac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2025      	movs	r0, #37	; 0x25
 80008ee:	f000 fa04 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f2:	2025      	movs	r0, #37	; 0x25
 80008f4:	f000 fa1d 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40011000 	.word	0x40011000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f8d4 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <USART1_IRQHandler+0x10>)
 8000966:	f001 f899 	bl	8001a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000208 	.word	0x20000208

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f001 fe2c 	bl	8002600 <__errno>
 80009a8:	4602      	mov	r2, r0
 80009aa:	230c      	movs	r3, #12
 80009ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20020000 	.word	0x20020000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200001fc 	.word	0x200001fc
 80009dc:	200003a8 	.word	0x200003a8

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemInit+0x28>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SystemInit+0x28>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SystemInit+0x28>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	609a      	str	r2, [r3, #8]
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
  ldr  r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd3 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f001 fde7 	bl	800260c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fdaf 	bl	80005a0 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a48:	08003444 	.word	0x08003444
  ldr  r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a50:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000a54:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000a58:	200003a8 	.word	0x200003a8

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f92b 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fec2 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f943 	bl	8000d4e <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f90b 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	200003a0 	.word	0x200003a0

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200003a0 	.word	0x200003a0

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff29 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff3e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff31 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffa2 	bl	8000ca0 <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d004      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00c      	b.n	8000d9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2205      	movs	r2, #5
 8000d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e16b      	b.n	80010a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 815a 	bne.w	800109a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d00b      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfa:	2b11      	cmp	r3, #17
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0xfc>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80b4 	beq.w	800109a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x328>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x32c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00e      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4934      	ldr	r1, [pc, #208]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_GPIO_Init+0x330>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae90 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e25b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d075      	beq.n	80011ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fe:	4ba3      	ldr	r3, [pc, #652]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00c      	beq.n	8001124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110a:	4ba0      	ldr	r3, [pc, #640]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	2b08      	cmp	r3, #8
 8001114:	d112      	bne.n	800113c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b9d      	ldr	r3, [pc, #628]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001122:	d10b      	bne.n	800113c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	4b99      	ldr	r3, [pc, #612]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d05b      	beq.n	80011e8 <HAL_RCC_OscConfig+0x108>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d157      	bne.n	80011e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e236      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d106      	bne.n	8001154 <HAL_RCC_OscConfig+0x74>
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a90      	ldr	r2, [pc, #576]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01d      	b.n	8001190 <HAL_RCC_OscConfig+0xb0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x98>
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a8a      	ldr	r2, [pc, #552]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0xb0>
 8001178:	4b84      	ldr	r3, [pc, #528]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a83      	ldr	r2, [pc, #524]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a80      	ldr	r2, [pc, #512]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fcc8 	bl	8000b2c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fcc4 	bl	8000b2c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1fb      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0xc0>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcb4 	bl	8000b2c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fcb0 	bl	8000b2c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1e7      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	4b6c      	ldr	r3, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0xe8>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d063      	beq.n	80012be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001202:	4b62      	ldr	r3, [pc, #392]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d11c      	bne.n	8001248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d116      	bne.n	8001248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x152>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d001      	beq.n	8001232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e1bb      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4952      	ldr	r1, [pc, #328]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e03a      	b.n	80012be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <HAL_RCC_OscConfig+0x2b0>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fc69 	bl	8000b2c <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc65 	bl	8000b2c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e19c      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4940      	ldr	r1, [pc, #256]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x2b0>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fc48 	bl	8000b2c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc44 	bl	8000b2c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e17b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d016      	beq.n	8001300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_RCC_OscConfig+0x2b4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc28 	bl	8000b2c <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc24 	bl	8000b2c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e15b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x200>
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x2b4>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fc11 	bl	8000b2c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fc0d 	bl	8000b2c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e144      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a0 	beq.w	800147a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d121      	bne.n	80013ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fbd3 	bl	8000b2c <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e011      	b.n	80013ae <HAL_RCC_OscConfig+0x2ce>
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	42470000 	.word	0x42470000
 8001394:	42470e80 	.word	0x42470e80
 8001398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139c:	f7ff fbc6 	bl	8000b2c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0fd      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
 80013c2:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a7c      	ldr	r2, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
 80013ce:	e01c      	b.n	800140a <HAL_RCC_OscConfig+0x32a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x312>
 80013d8:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a76      	ldr	r2, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a73      	ldr	r2, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x32a>
 80013f2:	4b71      	ldr	r3, [pc, #452]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a70      	ldr	r2, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fb8b 	bl	8000b2c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb87 	bl	8000b2c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0bc      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <HAL_RCC_OscConfig+0x33a>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb75 	bl	8000b2c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb71 	bl	8000b2c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0a6      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8092 	beq.w	80015a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d05c      	beq.n	800154a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d141      	bne.n	800151c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b48      	ldr	r3, [pc, #288]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb45 	bl	8000b2c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb41 	bl	8000b2c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e078      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	019b      	lsls	r3, r3, #6
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	3b01      	subs	r3, #1
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	4933      	ldr	r1, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb1a 	bl	8000b2c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fb16 	bl	8000b2c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04d      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x41c>
 800151a:	e045      	b.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb03 	bl	8000b2c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff faff 	bl	8000b2c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e036      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x44a>
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e029      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	429a      	cmp	r2, r3
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d115      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001584:	4293      	cmp	r3, r2
 8001586:	d10d      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40007000 	.word	0x40007000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470060 	.word	0x42470060

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0cc      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d90c      	bls.n	80015fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d044      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d119      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167a:	2b03      	cmp	r3, #3
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e067      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 0203 	bic.w	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fa3c 	bl	8000b2c <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff fa38 	bl	8000b2c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e04f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 020c 	and.w	r2, r3, #12
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1eb      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d20c      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4601      	mov	r1, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	fa21 f303 	lsr.w	r3, r1, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f99c 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08003290 	.word	0x08003290
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d007      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x32>
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d008      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x38>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 808d 	bne.w	80018d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ba:	60bb      	str	r3, [r7, #8]
       break;
 80017bc:	e08c      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_GetSysClockFreq+0x160>)
 80017c0:	60bb      	str	r3, [r7, #8]
      break;
 80017c2:	e089      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ce:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d023      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	f04f 0400 	mov.w	r4, #0
 80017e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	ea03 0501 	and.w	r5, r3, r1
 80017f0:	ea04 0602 	and.w	r6, r4, r2
 80017f4:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_RCC_GetSysClockFreq+0x160>)
 80017f6:	fb02 f106 	mul.w	r1, r2, r6
 80017fa:	2200      	movs	r2, #0
 80017fc:	fb02 f205 	mul.w	r2, r2, r5
 8001800:	440a      	add	r2, r1
 8001802:	493a      	ldr	r1, [pc, #232]	; (80018ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001804:	fba5 0101 	umull	r0, r1, r5, r1
 8001808:	1853      	adds	r3, r2, r1
 800180a:	4619      	mov	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	461a      	mov	r2, r3
 8001814:	4623      	mov	r3, r4
 8001816:	f7fe fd33 	bl	8000280 <__aeabi_uldivmod>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e049      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	ea03 0501 	and.w	r5, r3, r1
 8001838:	ea04 0602 	and.w	r6, r4, r2
 800183c:	4629      	mov	r1, r5
 800183e:	4632      	mov	r2, r6
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	0154      	lsls	r4, r2, #5
 800184a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800184e:	014b      	lsls	r3, r1, #5
 8001850:	4619      	mov	r1, r3
 8001852:	4622      	mov	r2, r4
 8001854:	1b49      	subs	r1, r1, r5
 8001856:	eb62 0206 	sbc.w	r2, r2, r6
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	0194      	lsls	r4, r2, #6
 8001864:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001868:	018b      	lsls	r3, r1, #6
 800186a:	1a5b      	subs	r3, r3, r1
 800186c:	eb64 0402 	sbc.w	r4, r4, r2
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	00e2      	lsls	r2, r4, #3
 800187a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800187e:	00d9      	lsls	r1, r3, #3
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	195b      	adds	r3, r3, r5
 8001886:	eb44 0406 	adc.w	r4, r4, r6
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	02a2      	lsls	r2, r4, #10
 8001894:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001898:	0299      	lsls	r1, r3, #10
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f04f 0400 	mov.w	r4, #0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	f7fe fce8 	bl	8000280 <__aeabi_uldivmod>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	3301      	adds	r3, #1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	60bb      	str	r3, [r7, #8]
      break;
 80018d0:	e002      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018d4:	60bb      	str	r3, [r7, #8]
      break;
 80018d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d8:	68bb      	ldr	r3, [r7, #8]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	017d7840 	.word	0x017d7840

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4601      	mov	r1, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	080032a0 	.word	0x080032a0

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4601      	mov	r1, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	080032a0 	.word	0x080032a0

08001958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e03f      	b.n	80019ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe ff74 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800199a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fab3 	bl	8001f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	4613      	mov	r3, r2
 80019fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d140      	bne.n	8001a8e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_UART_Receive_IT+0x26>
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e039      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Receive_IT+0x38>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e032      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2222      	movs	r2, #34	; 0x22
 8001a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a68:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_UART_IRQHandler+0x52>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f98c 	bl	8001e04 <UART_Receive_IT>
      return;
 8001aec:	e0d1      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80b0 	beq.w	8001c56 <HAL_UART_IRQHandler+0x1ba>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_UART_IRQHandler+0x70>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a5 	beq.w	8001c56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_UART_IRQHandler+0x90>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_UART_IRQHandler+0xb0>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	f043 0202 	orr.w	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_UART_IRQHandler+0xd0>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00f      	beq.n	8001b96 <HAL_UART_IRQHandler+0xfa>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_UART_IRQHandler+0xee>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	f043 0208 	orr.w	r2, r3, #8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d078      	beq.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x11c>
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f926 	bl	8001e04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	bf0c      	ite	eq
 8001bc6:	2301      	moveq	r3, #1
 8001bc8:	2300      	movne	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_UART_IRQHandler+0x144>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d031      	beq.n	8001c44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f86f 	bl	8001cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d123      	bne.n	8001c3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_UART_IRQHandler+0x1fc>)
 8001c12:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f8a4 	bl	8000d66 <HAL_DMA_Abort_IT>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c32:	e00e      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f83b 	bl	8001cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c3a:	e00a      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f837 	bl	8001cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c42:	e006      	b.n	8001c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f833 	bl	8001cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c50:	e01e      	b.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c52:	bf00      	nop
    return;
 8001c54:	e01c      	b.n	8001c90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1d6>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f85c 	bl	8001d28 <UART_Transmit_IT>
    return;
 8001c70:	e00f      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8a4 	bl	8001dd4 <UART_EndTransmit_IT>
    return;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c90:	bf00      	nop
  }
}
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08001d01 	.word	0x08001d01

08001c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff ffc8 	bl	8001cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b21      	cmp	r3, #33	; 0x21
 8001d3a:	d144      	bne.n	8001dc6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d44:	d11a      	bne.n	8001d7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	1c9a      	adds	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	621a      	str	r2, [r3, #32]
 8001d6e:	e00e      	b.n	8001d8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	621a      	str	r2, [r3, #32]
 8001d7a:	e008      	b.n	8001d8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	1c59      	adds	r1, r3, #1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6211      	str	r1, [r2, #32]
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff51 	bl	8001c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b22      	cmp	r3, #34	; 0x22
 8001e16:	d171      	bne.n	8001efc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e20:	d123      	bne.n	8001e6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10e      	bne.n	8001e4e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	1c9a      	adds	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4c:	e029      	b.n	8001ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
 8001e68:	e01b      	b.n	8001ea2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6858      	ldr	r0, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6291      	str	r1, [r2, #40]	; 0x28
 8001e82:	b2c2      	uxtb	r2, r0
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e00c      	b.n	8001ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	1c58      	adds	r0, r3, #1
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6288      	str	r0, [r1, #40]	; 0x28
 8001e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d120      	bne.n	8001ef8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0220 	bic.w	r2, r2, #32
 8001ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fb46 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e002      	b.n	8001efe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e000      	b.n	8001efe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f4a:	f023 030c 	bic.w	r3, r3, #12
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f76:	f040 818b 	bne.w	8002290 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4ac1      	ldr	r2, [pc, #772]	; (8002284 <UART_SetConfig+0x37c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d005      	beq.n	8001f90 <UART_SetConfig+0x88>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4abf      	ldr	r2, [pc, #764]	; (8002288 <UART_SetConfig+0x380>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 80bd 	bne.w	800210a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f90:	f7ff fcce 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8001f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	461d      	mov	r5, r3
 8001f9a:	f04f 0600 	mov.w	r6, #0
 8001f9e:	46a8      	mov	r8, r5
 8001fa0:	46b1      	mov	r9, r6
 8001fa2:	eb18 0308 	adds.w	r3, r8, r8
 8001fa6:	eb49 0409 	adc.w	r4, r9, r9
 8001faa:	4698      	mov	r8, r3
 8001fac:	46a1      	mov	r9, r4
 8001fae:	eb18 0805 	adds.w	r8, r8, r5
 8001fb2:	eb49 0906 	adc.w	r9, r9, r6
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fca:	4688      	mov	r8, r1
 8001fcc:	4691      	mov	r9, r2
 8001fce:	eb18 0005 	adds.w	r0, r8, r5
 8001fd2:	eb49 0106 	adc.w	r1, r9, r6
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	461d      	mov	r5, r3
 8001fdc:	f04f 0600 	mov.w	r6, #0
 8001fe0:	196b      	adds	r3, r5, r5
 8001fe2:	eb46 0406 	adc.w	r4, r6, r6
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	f7fe f949 	bl	8000280 <__aeabi_uldivmod>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4ba5      	ldr	r3, [pc, #660]	; (800228c <UART_SetConfig+0x384>)
 8001ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	461d      	mov	r5, r3
 8002004:	f04f 0600 	mov.w	r6, #0
 8002008:	46a9      	mov	r9, r5
 800200a:	46b2      	mov	sl, r6
 800200c:	eb19 0309 	adds.w	r3, r9, r9
 8002010:	eb4a 040a 	adc.w	r4, sl, sl
 8002014:	4699      	mov	r9, r3
 8002016:	46a2      	mov	sl, r4
 8002018:	eb19 0905 	adds.w	r9, r9, r5
 800201c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800202c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002034:	4689      	mov	r9, r1
 8002036:	4692      	mov	sl, r2
 8002038:	eb19 0005 	adds.w	r0, r9, r5
 800203c:	eb4a 0106 	adc.w	r1, sl, r6
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	461d      	mov	r5, r3
 8002046:	f04f 0600 	mov.w	r6, #0
 800204a:	196b      	adds	r3, r5, r5
 800204c:	eb46 0406 	adc.w	r4, r6, r6
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	f7fe f914 	bl	8000280 <__aeabi_uldivmod>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	461a      	mov	r2, r3
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <UART_SetConfig+0x384>)
 8002060:	fba3 1302 	umull	r1, r3, r3, r2
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	3332      	adds	r3, #50	; 0x32
 8002072:	4a86      	ldr	r2, [pc, #536]	; (800228c <UART_SetConfig+0x384>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002080:	4498      	add	r8, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	461d      	mov	r5, r3
 8002086:	f04f 0600 	mov.w	r6, #0
 800208a:	46a9      	mov	r9, r5
 800208c:	46b2      	mov	sl, r6
 800208e:	eb19 0309 	adds.w	r3, r9, r9
 8002092:	eb4a 040a 	adc.w	r4, sl, sl
 8002096:	4699      	mov	r9, r3
 8002098:	46a2      	mov	sl, r4
 800209a:	eb19 0905 	adds.w	r9, r9, r5
 800209e:	eb4a 0a06 	adc.w	sl, sl, r6
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020b6:	4689      	mov	r9, r1
 80020b8:	4692      	mov	sl, r2
 80020ba:	eb19 0005 	adds.w	r0, r9, r5
 80020be:	eb4a 0106 	adc.w	r1, sl, r6
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	461d      	mov	r5, r3
 80020c8:	f04f 0600 	mov.w	r6, #0
 80020cc:	196b      	adds	r3, r5, r5
 80020ce:	eb46 0406 	adc.w	r4, r6, r6
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	f7fe f8d3 	bl	8000280 <__aeabi_uldivmod>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	461a      	mov	r2, r3
 80020e0:	4b6a      	ldr	r3, [pc, #424]	; (800228c <UART_SetConfig+0x384>)
 80020e2:	fba3 1302 	umull	r1, r3, r3, r2
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2164      	movs	r1, #100	; 0x64
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	3332      	adds	r3, #50	; 0x32
 80020f4:	4a65      	ldr	r2, [pc, #404]	; (800228c <UART_SetConfig+0x384>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	f003 0207 	and.w	r2, r3, #7
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4442      	add	r2, r8
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e26f      	b.n	80025ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800210a:	f7ff fbfd 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 800210e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	461d      	mov	r5, r3
 8002114:	f04f 0600 	mov.w	r6, #0
 8002118:	46a8      	mov	r8, r5
 800211a:	46b1      	mov	r9, r6
 800211c:	eb18 0308 	adds.w	r3, r8, r8
 8002120:	eb49 0409 	adc.w	r4, r9, r9
 8002124:	4698      	mov	r8, r3
 8002126:	46a1      	mov	r9, r4
 8002128:	eb18 0805 	adds.w	r8, r8, r5
 800212c:	eb49 0906 	adc.w	r9, r9, r6
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800213c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002140:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002144:	4688      	mov	r8, r1
 8002146:	4691      	mov	r9, r2
 8002148:	eb18 0005 	adds.w	r0, r8, r5
 800214c:	eb49 0106 	adc.w	r1, r9, r6
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	461d      	mov	r5, r3
 8002156:	f04f 0600 	mov.w	r6, #0
 800215a:	196b      	adds	r3, r5, r5
 800215c:	eb46 0406 	adc.w	r4, r6, r6
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	f7fe f88c 	bl	8000280 <__aeabi_uldivmod>
 8002168:	4603      	mov	r3, r0
 800216a:	460c      	mov	r4, r1
 800216c:	461a      	mov	r2, r3
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <UART_SetConfig+0x384>)
 8002170:	fba3 2302 	umull	r2, r3, r3, r2
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	461d      	mov	r5, r3
 800217e:	f04f 0600 	mov.w	r6, #0
 8002182:	46a9      	mov	r9, r5
 8002184:	46b2      	mov	sl, r6
 8002186:	eb19 0309 	adds.w	r3, r9, r9
 800218a:	eb4a 040a 	adc.w	r4, sl, sl
 800218e:	4699      	mov	r9, r3
 8002190:	46a2      	mov	sl, r4
 8002192:	eb19 0905 	adds.w	r9, r9, r5
 8002196:	eb4a 0a06 	adc.w	sl, sl, r6
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021ae:	4689      	mov	r9, r1
 80021b0:	4692      	mov	sl, r2
 80021b2:	eb19 0005 	adds.w	r0, r9, r5
 80021b6:	eb4a 0106 	adc.w	r1, sl, r6
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	461d      	mov	r5, r3
 80021c0:	f04f 0600 	mov.w	r6, #0
 80021c4:	196b      	adds	r3, r5, r5
 80021c6:	eb46 0406 	adc.w	r4, r6, r6
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	f7fe f857 	bl	8000280 <__aeabi_uldivmod>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <UART_SetConfig+0x384>)
 80021da:	fba3 1302 	umull	r1, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2164      	movs	r1, #100	; 0x64
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	3332      	adds	r3, #50	; 0x32
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <UART_SetConfig+0x384>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021fa:	4498      	add	r8, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	461d      	mov	r5, r3
 8002200:	f04f 0600 	mov.w	r6, #0
 8002204:	46a9      	mov	r9, r5
 8002206:	46b2      	mov	sl, r6
 8002208:	eb19 0309 	adds.w	r3, r9, r9
 800220c:	eb4a 040a 	adc.w	r4, sl, sl
 8002210:	4699      	mov	r9, r3
 8002212:	46a2      	mov	sl, r4
 8002214:	eb19 0905 	adds.w	r9, r9, r5
 8002218:	eb4a 0a06 	adc.w	sl, sl, r6
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800222c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002230:	4689      	mov	r9, r1
 8002232:	4692      	mov	sl, r2
 8002234:	eb19 0005 	adds.w	r0, r9, r5
 8002238:	eb4a 0106 	adc.w	r1, sl, r6
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	461d      	mov	r5, r3
 8002242:	f04f 0600 	mov.w	r6, #0
 8002246:	196b      	adds	r3, r5, r5
 8002248:	eb46 0406 	adc.w	r4, r6, r6
 800224c:	461a      	mov	r2, r3
 800224e:	4623      	mov	r3, r4
 8002250:	f7fe f816 	bl	8000280 <__aeabi_uldivmod>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	461a      	mov	r2, r3
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <UART_SetConfig+0x384>)
 800225c:	fba3 1302 	umull	r1, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2164      	movs	r1, #100	; 0x64
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <UART_SetConfig+0x384>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4442      	add	r2, r8
 8002280:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002282:	e1b2      	b.n	80025ea <UART_SetConfig+0x6e2>
 8002284:	40011000 	.word	0x40011000
 8002288:	40011400 	.word	0x40011400
 800228c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4ad7      	ldr	r2, [pc, #860]	; (80025f4 <UART_SetConfig+0x6ec>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d005      	beq.n	80022a6 <UART_SetConfig+0x39e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4ad6      	ldr	r2, [pc, #856]	; (80025f8 <UART_SetConfig+0x6f0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 80d1 	bne.w	8002448 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022a6:	f7ff fb43 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 80022aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	469a      	mov	sl, r3
 80022b0:	f04f 0b00 	mov.w	fp, #0
 80022b4:	46d0      	mov	r8, sl
 80022b6:	46d9      	mov	r9, fp
 80022b8:	eb18 0308 	adds.w	r3, r8, r8
 80022bc:	eb49 0409 	adc.w	r4, r9, r9
 80022c0:	4698      	mov	r8, r3
 80022c2:	46a1      	mov	r9, r4
 80022c4:	eb18 080a 	adds.w	r8, r8, sl
 80022c8:	eb49 090b 	adc.w	r9, r9, fp
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022e0:	4688      	mov	r8, r1
 80022e2:	4691      	mov	r9, r2
 80022e4:	eb1a 0508 	adds.w	r5, sl, r8
 80022e8:	eb4b 0609 	adc.w	r6, fp, r9
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	f04f 0400 	mov.w	r4, #0
 80022fe:	0094      	lsls	r4, r2, #2
 8002300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002304:	008b      	lsls	r3, r1, #2
 8002306:	461a      	mov	r2, r3
 8002308:	4623      	mov	r3, r4
 800230a:	4628      	mov	r0, r5
 800230c:	4631      	mov	r1, r6
 800230e:	f7fd ffb7 	bl	8000280 <__aeabi_uldivmod>
 8002312:	4603      	mov	r3, r0
 8002314:	460c      	mov	r4, r1
 8002316:	461a      	mov	r2, r3
 8002318:	4bb8      	ldr	r3, [pc, #736]	; (80025fc <UART_SetConfig+0x6f4>)
 800231a:	fba3 2302 	umull	r2, r3, r3, r2
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	469b      	mov	fp, r3
 8002328:	f04f 0c00 	mov.w	ip, #0
 800232c:	46d9      	mov	r9, fp
 800232e:	46e2      	mov	sl, ip
 8002330:	eb19 0309 	adds.w	r3, r9, r9
 8002334:	eb4a 040a 	adc.w	r4, sl, sl
 8002338:	4699      	mov	r9, r3
 800233a:	46a2      	mov	sl, r4
 800233c:	eb19 090b 	adds.w	r9, r9, fp
 8002340:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002358:	4689      	mov	r9, r1
 800235a:	4692      	mov	sl, r2
 800235c:	eb1b 0509 	adds.w	r5, fp, r9
 8002360:	eb4c 060a 	adc.w	r6, ip, sl
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	0094      	lsls	r4, r2, #2
 8002378:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800237c:	008b      	lsls	r3, r1, #2
 800237e:	461a      	mov	r2, r3
 8002380:	4623      	mov	r3, r4
 8002382:	4628      	mov	r0, r5
 8002384:	4631      	mov	r1, r6
 8002386:	f7fd ff7b 	bl	8000280 <__aeabi_uldivmod>
 800238a:	4603      	mov	r3, r0
 800238c:	460c      	mov	r4, r1
 800238e:	461a      	mov	r2, r3
 8002390:	4b9a      	ldr	r3, [pc, #616]	; (80025fc <UART_SetConfig+0x6f4>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2164      	movs	r1, #100	; 0x64
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	3332      	adds	r3, #50	; 0x32
 80023a4:	4a95      	ldr	r2, [pc, #596]	; (80025fc <UART_SetConfig+0x6f4>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b0:	4498      	add	r8, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	469b      	mov	fp, r3
 80023b6:	f04f 0c00 	mov.w	ip, #0
 80023ba:	46d9      	mov	r9, fp
 80023bc:	46e2      	mov	sl, ip
 80023be:	eb19 0309 	adds.w	r3, r9, r9
 80023c2:	eb4a 040a 	adc.w	r4, sl, sl
 80023c6:	4699      	mov	r9, r3
 80023c8:	46a2      	mov	sl, r4
 80023ca:	eb19 090b 	adds.w	r9, r9, fp
 80023ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023e6:	4689      	mov	r9, r1
 80023e8:	4692      	mov	sl, r2
 80023ea:	eb1b 0509 	adds.w	r5, fp, r9
 80023ee:	eb4c 060a 	adc.w	r6, ip, sl
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	f04f 0400 	mov.w	r4, #0
 8002404:	0094      	lsls	r4, r2, #2
 8002406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800240a:	008b      	lsls	r3, r1, #2
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	4628      	mov	r0, r5
 8002412:	4631      	mov	r1, r6
 8002414:	f7fd ff34 	bl	8000280 <__aeabi_uldivmod>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	461a      	mov	r2, r3
 800241e:	4b77      	ldr	r3, [pc, #476]	; (80025fc <UART_SetConfig+0x6f4>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	; 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a72      	ldr	r2, [pc, #456]	; (80025fc <UART_SetConfig+0x6f4>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4442      	add	r2, r8
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	e0d0      	b.n	80025ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002448:	f7ff fa5e 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 800244c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	469a      	mov	sl, r3
 8002452:	f04f 0b00 	mov.w	fp, #0
 8002456:	46d0      	mov	r8, sl
 8002458:	46d9      	mov	r9, fp
 800245a:	eb18 0308 	adds.w	r3, r8, r8
 800245e:	eb49 0409 	adc.w	r4, r9, r9
 8002462:	4698      	mov	r8, r3
 8002464:	46a1      	mov	r9, r4
 8002466:	eb18 080a 	adds.w	r8, r8, sl
 800246a:	eb49 090b 	adc.w	r9, r9, fp
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800247a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800247e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002482:	4688      	mov	r8, r1
 8002484:	4691      	mov	r9, r2
 8002486:	eb1a 0508 	adds.w	r5, sl, r8
 800248a:	eb4b 0609 	adc.w	r6, fp, r9
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f04f 0400 	mov.w	r4, #0
 80024a0:	0094      	lsls	r4, r2, #2
 80024a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	4628      	mov	r0, r5
 80024ae:	4631      	mov	r1, r6
 80024b0:	f7fd fee6 	bl	8000280 <__aeabi_uldivmod>
 80024b4:	4603      	mov	r3, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <UART_SetConfig+0x6f4>)
 80024bc:	fba3 2302 	umull	r2, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	469b      	mov	fp, r3
 80024ca:	f04f 0c00 	mov.w	ip, #0
 80024ce:	46d9      	mov	r9, fp
 80024d0:	46e2      	mov	sl, ip
 80024d2:	eb19 0309 	adds.w	r3, r9, r9
 80024d6:	eb4a 040a 	adc.w	r4, sl, sl
 80024da:	4699      	mov	r9, r3
 80024dc:	46a2      	mov	sl, r4
 80024de:	eb19 090b 	adds.w	r9, r9, fp
 80024e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024fa:	4689      	mov	r9, r1
 80024fc:	4692      	mov	sl, r2
 80024fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002502:	eb4c 060a 	adc.w	r6, ip, sl
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	f04f 0400 	mov.w	r4, #0
 8002518:	0094      	lsls	r4, r2, #2
 800251a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800251e:	008b      	lsls	r3, r1, #2
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	4628      	mov	r0, r5
 8002526:	4631      	mov	r1, r6
 8002528:	f7fd feaa 	bl	8000280 <__aeabi_uldivmod>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	461a      	mov	r2, r3
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <UART_SetConfig+0x6f4>)
 8002534:	fba3 1302 	umull	r1, r3, r3, r2
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2164      	movs	r1, #100	; 0x64
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <UART_SetConfig+0x6f4>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002552:	4498      	add	r8, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	469b      	mov	fp, r3
 8002558:	f04f 0c00 	mov.w	ip, #0
 800255c:	46d9      	mov	r9, fp
 800255e:	46e2      	mov	sl, ip
 8002560:	eb19 0309 	adds.w	r3, r9, r9
 8002564:	eb4a 040a 	adc.w	r4, sl, sl
 8002568:	4699      	mov	r9, r3
 800256a:	46a2      	mov	sl, r4
 800256c:	eb19 090b 	adds.w	r9, r9, fp
 8002570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002588:	4689      	mov	r9, r1
 800258a:	4692      	mov	sl, r2
 800258c:	eb1b 0509 	adds.w	r5, fp, r9
 8002590:	eb4c 060a 	adc.w	r6, ip, sl
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4619      	mov	r1, r3
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	f04f 0400 	mov.w	r4, #0
 80025a6:	0094      	lsls	r4, r2, #2
 80025a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ac:	008b      	lsls	r3, r1, #2
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	4628      	mov	r0, r5
 80025b4:	4631      	mov	r1, r6
 80025b6:	f7fd fe63 	bl	8000280 <__aeabi_uldivmod>
 80025ba:	4603      	mov	r3, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	461a      	mov	r2, r3
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <UART_SetConfig+0x6f4>)
 80025c2:	fba3 1302 	umull	r1, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2164      	movs	r1, #100	; 0x64
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a09      	ldr	r2, [pc, #36]	; (80025fc <UART_SetConfig+0x6f4>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4442      	add	r2, r8
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	e7ff      	b.n	80025ea <UART_SetConfig+0x6e2>
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	51eb851f 	.word	0x51eb851f

08002600 <__errno>:
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <__errno+0x8>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c

0800260c <__libc_init_array>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	4e0d      	ldr	r6, [pc, #52]	; (8002644 <__libc_init_array+0x38>)
 8002610:	4c0d      	ldr	r4, [pc, #52]	; (8002648 <__libc_init_array+0x3c>)
 8002612:	1ba4      	subs	r4, r4, r6
 8002614:	10a4      	asrs	r4, r4, #2
 8002616:	2500      	movs	r5, #0
 8002618:	42a5      	cmp	r5, r4
 800261a:	d109      	bne.n	8002630 <__libc_init_array+0x24>
 800261c:	4e0b      	ldr	r6, [pc, #44]	; (800264c <__libc_init_array+0x40>)
 800261e:	4c0c      	ldr	r4, [pc, #48]	; (8002650 <__libc_init_array+0x44>)
 8002620:	f000 fe0c 	bl	800323c <_init>
 8002624:	1ba4      	subs	r4, r4, r6
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	2500      	movs	r5, #0
 800262a:	42a5      	cmp	r5, r4
 800262c:	d105      	bne.n	800263a <__libc_init_array+0x2e>
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002634:	4798      	blx	r3
 8002636:	3501      	adds	r5, #1
 8002638:	e7ee      	b.n	8002618 <__libc_init_array+0xc>
 800263a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800263e:	4798      	blx	r3
 8002640:	3501      	adds	r5, #1
 8002642:	e7f2      	b.n	800262a <__libc_init_array+0x1e>
 8002644:	0800343c 	.word	0x0800343c
 8002648:	0800343c 	.word	0x0800343c
 800264c:	0800343c 	.word	0x0800343c
 8002650:	08003440 	.word	0x08003440

08002654 <memset>:
 8002654:	4402      	add	r2, r0
 8002656:	4603      	mov	r3, r0
 8002658:	4293      	cmp	r3, r2
 800265a:	d100      	bne.n	800265e <memset+0xa>
 800265c:	4770      	bx	lr
 800265e:	f803 1b01 	strb.w	r1, [r3], #1
 8002662:	e7f9      	b.n	8002658 <memset+0x4>

08002664 <siscanf>:
 8002664:	b40e      	push	{r1, r2, r3}
 8002666:	b530      	push	{r4, r5, lr}
 8002668:	b09c      	sub	sp, #112	; 0x70
 800266a:	ac1f      	add	r4, sp, #124	; 0x7c
 800266c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002670:	f854 5b04 	ldr.w	r5, [r4], #4
 8002674:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002678:	9002      	str	r0, [sp, #8]
 800267a:	9006      	str	r0, [sp, #24]
 800267c:	f7fd fda8 	bl	80001d0 <strlen>
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <siscanf+0x4c>)
 8002682:	9003      	str	r0, [sp, #12]
 8002684:	9007      	str	r0, [sp, #28]
 8002686:	930b      	str	r3, [sp, #44]	; 0x2c
 8002688:	480a      	ldr	r0, [pc, #40]	; (80026b4 <siscanf+0x50>)
 800268a:	9401      	str	r4, [sp, #4]
 800268c:	2300      	movs	r3, #0
 800268e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002690:	9314      	str	r3, [sp, #80]	; 0x50
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	f8ad 3016 	strh.w	r3, [sp, #22]
 800269a:	462a      	mov	r2, r5
 800269c:	4623      	mov	r3, r4
 800269e:	a902      	add	r1, sp, #8
 80026a0:	6800      	ldr	r0, [r0, #0]
 80026a2:	f000 f877 	bl	8002794 <__ssvfiscanf_r>
 80026a6:	b01c      	add	sp, #112	; 0x70
 80026a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026ac:	b003      	add	sp, #12
 80026ae:	4770      	bx	lr
 80026b0:	080026b9 	.word	0x080026b9
 80026b4:	2000000c 	.word	0x2000000c

080026b8 <__seofread>:
 80026b8:	2000      	movs	r0, #0
 80026ba:	4770      	bx	lr

080026bc <strncmp>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	b16a      	cbz	r2, 80026dc <strncmp+0x20>
 80026c0:	3901      	subs	r1, #1
 80026c2:	1884      	adds	r4, r0, r2
 80026c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80026c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <strncmp+0x1c>
 80026d0:	42a0      	cmp	r0, r4
 80026d2:	d001      	beq.n	80026d8 <strncmp+0x1c>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f5      	bne.n	80026c4 <strncmp+0x8>
 80026d8:	1a98      	subs	r0, r3, r2
 80026da:	bd10      	pop	{r4, pc}
 80026dc:	4610      	mov	r0, r2
 80026de:	e7fc      	b.n	80026da <strncmp+0x1e>

080026e0 <_sungetc_r>:
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	1c4b      	adds	r3, r1, #1
 80026e4:	4614      	mov	r4, r2
 80026e6:	d103      	bne.n	80026f0 <_sungetc_r+0x10>
 80026e8:	f04f 35ff 	mov.w	r5, #4294967295
 80026ec:	4628      	mov	r0, r5
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	8993      	ldrh	r3, [r2, #12]
 80026f2:	f023 0320 	bic.w	r3, r3, #32
 80026f6:	8193      	strh	r3, [r2, #12]
 80026f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	b2cd      	uxtb	r5, r1
 80026fe:	b18b      	cbz	r3, 8002724 <_sungetc_r+0x44>
 8002700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002702:	4293      	cmp	r3, r2
 8002704:	dd08      	ble.n	8002718 <_sungetc_r+0x38>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	6022      	str	r2, [r4, #0]
 800270c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002710:	6863      	ldr	r3, [r4, #4]
 8002712:	3301      	adds	r3, #1
 8002714:	6063      	str	r3, [r4, #4]
 8002716:	e7e9      	b.n	80026ec <_sungetc_r+0xc>
 8002718:	4621      	mov	r1, r4
 800271a:	f000 fc2f 	bl	8002f7c <__submore>
 800271e:	2800      	cmp	r0, #0
 8002720:	d0f1      	beq.n	8002706 <_sungetc_r+0x26>
 8002722:	e7e1      	b.n	80026e8 <_sungetc_r+0x8>
 8002724:	6921      	ldr	r1, [r4, #16]
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	b151      	cbz	r1, 8002740 <_sungetc_r+0x60>
 800272a:	4299      	cmp	r1, r3
 800272c:	d208      	bcs.n	8002740 <_sungetc_r+0x60>
 800272e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002732:	42a9      	cmp	r1, r5
 8002734:	d104      	bne.n	8002740 <_sungetc_r+0x60>
 8002736:	3b01      	subs	r3, #1
 8002738:	3201      	adds	r2, #1
 800273a:	6023      	str	r3, [r4, #0]
 800273c:	6062      	str	r2, [r4, #4]
 800273e:	e7d5      	b.n	80026ec <_sungetc_r+0xc>
 8002740:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002748:	6363      	str	r3, [r4, #52]	; 0x34
 800274a:	2303      	movs	r3, #3
 800274c:	63a3      	str	r3, [r4, #56]	; 0x38
 800274e:	4623      	mov	r3, r4
 8002750:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	2301      	movs	r3, #1
 8002758:	e7dc      	b.n	8002714 <_sungetc_r+0x34>

0800275a <__ssrefill_r>:
 800275a:	b510      	push	{r4, lr}
 800275c:	460c      	mov	r4, r1
 800275e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002760:	b169      	cbz	r1, 800277e <__ssrefill_r+0x24>
 8002762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002766:	4299      	cmp	r1, r3
 8002768:	d001      	beq.n	800276e <__ssrefill_r+0x14>
 800276a:	f000 fc71 	bl	8003050 <_free_r>
 800276e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002770:	6063      	str	r3, [r4, #4]
 8002772:	2000      	movs	r0, #0
 8002774:	6360      	str	r0, [r4, #52]	; 0x34
 8002776:	b113      	cbz	r3, 800277e <__ssrefill_r+0x24>
 8002778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800277a:	6023      	str	r3, [r4, #0]
 800277c:	bd10      	pop	{r4, pc}
 800277e:	6923      	ldr	r3, [r4, #16]
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	6063      	str	r3, [r4, #4]
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	81a3      	strh	r3, [r4, #12]
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
 8002792:	e7f3      	b.n	800277c <__ssrefill_r+0x22>

08002794 <__ssvfiscanf_r>:
 8002794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002798:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800279c:	460c      	mov	r4, r1
 800279e:	2100      	movs	r1, #0
 80027a0:	9144      	str	r1, [sp, #272]	; 0x110
 80027a2:	9145      	str	r1, [sp, #276]	; 0x114
 80027a4:	499f      	ldr	r1, [pc, #636]	; (8002a24 <__ssvfiscanf_r+0x290>)
 80027a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80027a8:	f10d 0804 	add.w	r8, sp, #4
 80027ac:	499e      	ldr	r1, [pc, #632]	; (8002a28 <__ssvfiscanf_r+0x294>)
 80027ae:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002a2c <__ssvfiscanf_r+0x298>
 80027b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80027b6:	4606      	mov	r6, r0
 80027b8:	4692      	mov	sl, r2
 80027ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	270a      	movs	r7, #10
 80027c0:	f89a 3000 	ldrb.w	r3, [sl]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 812a 	beq.w	8002a1e <__ssvfiscanf_r+0x28a>
 80027ca:	4655      	mov	r5, sl
 80027cc:	f000 fc14 	bl	8002ff8 <__locale_ctype_ptr>
 80027d0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80027d4:	4458      	add	r0, fp
 80027d6:	7843      	ldrb	r3, [r0, #1]
 80027d8:	f013 0308 	ands.w	r3, r3, #8
 80027dc:	d01c      	beq.n	8002818 <__ssvfiscanf_r+0x84>
 80027de:	6863      	ldr	r3, [r4, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	dd12      	ble.n	800280a <__ssvfiscanf_r+0x76>
 80027e4:	f000 fc08 	bl	8002ff8 <__locale_ctype_ptr>
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	4410      	add	r0, r2
 80027ee:	7842      	ldrb	r2, [r0, #1]
 80027f0:	0712      	lsls	r2, r2, #28
 80027f2:	d401      	bmi.n	80027f8 <__ssvfiscanf_r+0x64>
 80027f4:	46aa      	mov	sl, r5
 80027f6:	e7e3      	b.n	80027c0 <__ssvfiscanf_r+0x2c>
 80027f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80027fa:	3201      	adds	r2, #1
 80027fc:	9245      	str	r2, [sp, #276]	; 0x114
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	3301      	adds	r3, #1
 8002802:	3a01      	subs	r2, #1
 8002804:	6062      	str	r2, [r4, #4]
 8002806:	6023      	str	r3, [r4, #0]
 8002808:	e7e9      	b.n	80027de <__ssvfiscanf_r+0x4a>
 800280a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800280c:	4621      	mov	r1, r4
 800280e:	4630      	mov	r0, r6
 8002810:	4798      	blx	r3
 8002812:	2800      	cmp	r0, #0
 8002814:	d0e6      	beq.n	80027e4 <__ssvfiscanf_r+0x50>
 8002816:	e7ed      	b.n	80027f4 <__ssvfiscanf_r+0x60>
 8002818:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800281c:	f040 8082 	bne.w	8002924 <__ssvfiscanf_r+0x190>
 8002820:	9343      	str	r3, [sp, #268]	; 0x10c
 8002822:	9341      	str	r3, [sp, #260]	; 0x104
 8002824:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002828:	2b2a      	cmp	r3, #42	; 0x2a
 800282a:	d103      	bne.n	8002834 <__ssvfiscanf_r+0xa0>
 800282c:	2310      	movs	r3, #16
 800282e:	9341      	str	r3, [sp, #260]	; 0x104
 8002830:	f10a 0502 	add.w	r5, sl, #2
 8002834:	46aa      	mov	sl, r5
 8002836:	f815 1b01 	ldrb.w	r1, [r5], #1
 800283a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800283e:	2a09      	cmp	r2, #9
 8002840:	d922      	bls.n	8002888 <__ssvfiscanf_r+0xf4>
 8002842:	2203      	movs	r2, #3
 8002844:	4879      	ldr	r0, [pc, #484]	; (8002a2c <__ssvfiscanf_r+0x298>)
 8002846:	f7fd fccb 	bl	80001e0 <memchr>
 800284a:	b138      	cbz	r0, 800285c <__ssvfiscanf_r+0xc8>
 800284c:	eba0 0309 	sub.w	r3, r0, r9
 8002850:	2001      	movs	r0, #1
 8002852:	4098      	lsls	r0, r3
 8002854:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002856:	4318      	orrs	r0, r3
 8002858:	9041      	str	r0, [sp, #260]	; 0x104
 800285a:	46aa      	mov	sl, r5
 800285c:	f89a 3000 	ldrb.w	r3, [sl]
 8002860:	2b67      	cmp	r3, #103	; 0x67
 8002862:	f10a 0501 	add.w	r5, sl, #1
 8002866:	d82b      	bhi.n	80028c0 <__ssvfiscanf_r+0x12c>
 8002868:	2b65      	cmp	r3, #101	; 0x65
 800286a:	f080 809f 	bcs.w	80029ac <__ssvfiscanf_r+0x218>
 800286e:	2b47      	cmp	r3, #71	; 0x47
 8002870:	d810      	bhi.n	8002894 <__ssvfiscanf_r+0x100>
 8002872:	2b45      	cmp	r3, #69	; 0x45
 8002874:	f080 809a 	bcs.w	80029ac <__ssvfiscanf_r+0x218>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d06c      	beq.n	8002956 <__ssvfiscanf_r+0x1c2>
 800287c:	2b25      	cmp	r3, #37	; 0x25
 800287e:	d051      	beq.n	8002924 <__ssvfiscanf_r+0x190>
 8002880:	2303      	movs	r3, #3
 8002882:	9347      	str	r3, [sp, #284]	; 0x11c
 8002884:	9742      	str	r7, [sp, #264]	; 0x108
 8002886:	e027      	b.n	80028d8 <__ssvfiscanf_r+0x144>
 8002888:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800288a:	fb07 1303 	mla	r3, r7, r3, r1
 800288e:	3b30      	subs	r3, #48	; 0x30
 8002890:	9343      	str	r3, [sp, #268]	; 0x10c
 8002892:	e7cf      	b.n	8002834 <__ssvfiscanf_r+0xa0>
 8002894:	2b5b      	cmp	r3, #91	; 0x5b
 8002896:	d06a      	beq.n	800296e <__ssvfiscanf_r+0x1da>
 8002898:	d80c      	bhi.n	80028b4 <__ssvfiscanf_r+0x120>
 800289a:	2b58      	cmp	r3, #88	; 0x58
 800289c:	d1f0      	bne.n	8002880 <__ssvfiscanf_r+0xec>
 800289e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	9241      	str	r2, [sp, #260]	; 0x104
 80028a6:	2210      	movs	r2, #16
 80028a8:	9242      	str	r2, [sp, #264]	; 0x108
 80028aa:	2b6e      	cmp	r3, #110	; 0x6e
 80028ac:	bf8c      	ite	hi
 80028ae:	2304      	movhi	r3, #4
 80028b0:	2303      	movls	r3, #3
 80028b2:	e010      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 80028b4:	2b63      	cmp	r3, #99	; 0x63
 80028b6:	d065      	beq.n	8002984 <__ssvfiscanf_r+0x1f0>
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d1e1      	bne.n	8002880 <__ssvfiscanf_r+0xec>
 80028bc:	9742      	str	r7, [sp, #264]	; 0x108
 80028be:	e7f4      	b.n	80028aa <__ssvfiscanf_r+0x116>
 80028c0:	2b70      	cmp	r3, #112	; 0x70
 80028c2:	d04b      	beq.n	800295c <__ssvfiscanf_r+0x1c8>
 80028c4:	d826      	bhi.n	8002914 <__ssvfiscanf_r+0x180>
 80028c6:	2b6e      	cmp	r3, #110	; 0x6e
 80028c8:	d062      	beq.n	8002990 <__ssvfiscanf_r+0x1fc>
 80028ca:	d84c      	bhi.n	8002966 <__ssvfiscanf_r+0x1d2>
 80028cc:	2b69      	cmp	r3, #105	; 0x69
 80028ce:	d1d7      	bne.n	8002880 <__ssvfiscanf_r+0xec>
 80028d0:	2300      	movs	r3, #0
 80028d2:	9342      	str	r3, [sp, #264]	; 0x108
 80028d4:	2303      	movs	r3, #3
 80028d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80028d8:	6863      	ldr	r3, [r4, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dd68      	ble.n	80029b0 <__ssvfiscanf_r+0x21c>
 80028de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80028e0:	0659      	lsls	r1, r3, #25
 80028e2:	d407      	bmi.n	80028f4 <__ssvfiscanf_r+0x160>
 80028e4:	f000 fb88 	bl	8002ff8 <__locale_ctype_ptr>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	4410      	add	r0, r2
 80028ee:	7842      	ldrb	r2, [r0, #1]
 80028f0:	0712      	lsls	r2, r2, #28
 80028f2:	d464      	bmi.n	80029be <__ssvfiscanf_r+0x22a>
 80028f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	dc73      	bgt.n	80029e2 <__ssvfiscanf_r+0x24e>
 80028fa:	466b      	mov	r3, sp
 80028fc:	4622      	mov	r2, r4
 80028fe:	a941      	add	r1, sp, #260	; 0x104
 8002900:	4630      	mov	r0, r6
 8002902:	f000 f897 	bl	8002a34 <_scanf_chars>
 8002906:	2801      	cmp	r0, #1
 8002908:	f000 8089 	beq.w	8002a1e <__ssvfiscanf_r+0x28a>
 800290c:	2802      	cmp	r0, #2
 800290e:	f47f af71 	bne.w	80027f4 <__ssvfiscanf_r+0x60>
 8002912:	e01d      	b.n	8002950 <__ssvfiscanf_r+0x1bc>
 8002914:	2b75      	cmp	r3, #117	; 0x75
 8002916:	d0d1      	beq.n	80028bc <__ssvfiscanf_r+0x128>
 8002918:	2b78      	cmp	r3, #120	; 0x78
 800291a:	d0c0      	beq.n	800289e <__ssvfiscanf_r+0x10a>
 800291c:	2b73      	cmp	r3, #115	; 0x73
 800291e:	d1af      	bne.n	8002880 <__ssvfiscanf_r+0xec>
 8002920:	2302      	movs	r3, #2
 8002922:	e7d8      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 8002924:	6863      	ldr	r3, [r4, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	dd0c      	ble.n	8002944 <__ssvfiscanf_r+0x1b0>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	455a      	cmp	r2, fp
 8002930:	d175      	bne.n	8002a1e <__ssvfiscanf_r+0x28a>
 8002932:	3301      	adds	r3, #1
 8002934:	6862      	ldr	r2, [r4, #4]
 8002936:	6023      	str	r3, [r4, #0]
 8002938:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800293a:	3a01      	subs	r2, #1
 800293c:	3301      	adds	r3, #1
 800293e:	6062      	str	r2, [r4, #4]
 8002940:	9345      	str	r3, [sp, #276]	; 0x114
 8002942:	e757      	b.n	80027f4 <__ssvfiscanf_r+0x60>
 8002944:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002946:	4621      	mov	r1, r4
 8002948:	4630      	mov	r0, r6
 800294a:	4798      	blx	r3
 800294c:	2800      	cmp	r0, #0
 800294e:	d0ec      	beq.n	800292a <__ssvfiscanf_r+0x196>
 8002950:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002952:	2800      	cmp	r0, #0
 8002954:	d159      	bne.n	8002a0a <__ssvfiscanf_r+0x276>
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	e05c      	b.n	8002a16 <__ssvfiscanf_r+0x282>
 800295c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800295e:	f042 0220 	orr.w	r2, r2, #32
 8002962:	9241      	str	r2, [sp, #260]	; 0x104
 8002964:	e79b      	b.n	800289e <__ssvfiscanf_r+0x10a>
 8002966:	2308      	movs	r3, #8
 8002968:	9342      	str	r3, [sp, #264]	; 0x108
 800296a:	2304      	movs	r3, #4
 800296c:	e7b3      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 800296e:	4629      	mov	r1, r5
 8002970:	4640      	mov	r0, r8
 8002972:	f000 f9b7 	bl	8002ce4 <__sccl>
 8002976:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297c:	9341      	str	r3, [sp, #260]	; 0x104
 800297e:	4605      	mov	r5, r0
 8002980:	2301      	movs	r3, #1
 8002982:	e7a8      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 8002984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298a:	9341      	str	r3, [sp, #260]	; 0x104
 800298c:	2300      	movs	r3, #0
 800298e:	e7a2      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 8002990:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002992:	06c3      	lsls	r3, r0, #27
 8002994:	f53f af2e 	bmi.w	80027f4 <__ssvfiscanf_r+0x60>
 8002998:	9b00      	ldr	r3, [sp, #0]
 800299a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800299c:	1d19      	adds	r1, r3, #4
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	07c0      	lsls	r0, r0, #31
 80029a4:	bf4c      	ite	mi
 80029a6:	801a      	strhmi	r2, [r3, #0]
 80029a8:	601a      	strpl	r2, [r3, #0]
 80029aa:	e723      	b.n	80027f4 <__ssvfiscanf_r+0x60>
 80029ac:	2305      	movs	r3, #5
 80029ae:	e792      	b.n	80028d6 <__ssvfiscanf_r+0x142>
 80029b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80029b2:	4621      	mov	r1, r4
 80029b4:	4630      	mov	r0, r6
 80029b6:	4798      	blx	r3
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d090      	beq.n	80028de <__ssvfiscanf_r+0x14a>
 80029bc:	e7c8      	b.n	8002950 <__ssvfiscanf_r+0x1bc>
 80029be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80029c0:	3201      	adds	r2, #1
 80029c2:	9245      	str	r2, [sp, #276]	; 0x114
 80029c4:	6862      	ldr	r2, [r4, #4]
 80029c6:	3a01      	subs	r2, #1
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	6062      	str	r2, [r4, #4]
 80029cc:	dd02      	ble.n	80029d4 <__ssvfiscanf_r+0x240>
 80029ce:	3301      	adds	r3, #1
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	e787      	b.n	80028e4 <__ssvfiscanf_r+0x150>
 80029d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80029d6:	4621      	mov	r1, r4
 80029d8:	4630      	mov	r0, r6
 80029da:	4798      	blx	r3
 80029dc:	2800      	cmp	r0, #0
 80029de:	d081      	beq.n	80028e4 <__ssvfiscanf_r+0x150>
 80029e0:	e7b6      	b.n	8002950 <__ssvfiscanf_r+0x1bc>
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	dc06      	bgt.n	80029f4 <__ssvfiscanf_r+0x260>
 80029e6:	466b      	mov	r3, sp
 80029e8:	4622      	mov	r2, r4
 80029ea:	a941      	add	r1, sp, #260	; 0x104
 80029ec:	4630      	mov	r0, r6
 80029ee:	f000 f885 	bl	8002afc <_scanf_i>
 80029f2:	e788      	b.n	8002906 <__ssvfiscanf_r+0x172>
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <__ssvfiscanf_r+0x29c>)
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f43f aefc 	beq.w	80027f4 <__ssvfiscanf_r+0x60>
 80029fc:	466b      	mov	r3, sp
 80029fe:	4622      	mov	r2, r4
 8002a00:	a941      	add	r1, sp, #260	; 0x104
 8002a02:	4630      	mov	r0, r6
 8002a04:	f3af 8000 	nop.w
 8002a08:	e77d      	b.n	8002906 <__ssvfiscanf_r+0x172>
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a10:	bf18      	it	ne
 8002a12:	f04f 30ff 	movne.w	r0, #4294967295
 8002a16:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002a20:	e7f9      	b.n	8002a16 <__ssvfiscanf_r+0x282>
 8002a22:	bf00      	nop
 8002a24:	080026e1 	.word	0x080026e1
 8002a28:	0800275b 	.word	0x0800275b
 8002a2c:	080032a8 	.word	0x080032a8
 8002a30:	00000000 	.word	0x00000000

08002a34 <_scanf_chars>:
 8002a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a38:	4615      	mov	r5, r2
 8002a3a:	688a      	ldr	r2, [r1, #8]
 8002a3c:	4680      	mov	r8, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	b932      	cbnz	r2, 8002a50 <_scanf_chars+0x1c>
 8002a42:	698a      	ldr	r2, [r1, #24]
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	bf14      	ite	ne
 8002a48:	f04f 32ff 	movne.w	r2, #4294967295
 8002a4c:	2201      	moveq	r2, #1
 8002a4e:	608a      	str	r2, [r1, #8]
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	06d1      	lsls	r1, r2, #27
 8002a54:	bf5f      	itttt	pl
 8002a56:	681a      	ldrpl	r2, [r3, #0]
 8002a58:	1d11      	addpl	r1, r2, #4
 8002a5a:	6019      	strpl	r1, [r3, #0]
 8002a5c:	6817      	ldrpl	r7, [r2, #0]
 8002a5e:	2600      	movs	r6, #0
 8002a60:	69a3      	ldr	r3, [r4, #24]
 8002a62:	b1db      	cbz	r3, 8002a9c <_scanf_chars+0x68>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <_scanf_chars+0x44>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	6962      	ldr	r2, [r4, #20]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	b9a3      	cbnz	r3, 8002a9c <_scanf_chars+0x68>
 8002a72:	2e00      	cmp	r6, #0
 8002a74:	d132      	bne.n	8002adc <_scanf_chars+0xa8>
 8002a76:	e006      	b.n	8002a86 <_scanf_chars+0x52>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d007      	beq.n	8002a8c <_scanf_chars+0x58>
 8002a7c:	2e00      	cmp	r6, #0
 8002a7e:	d12d      	bne.n	8002adc <_scanf_chars+0xa8>
 8002a80:	69a3      	ldr	r3, [r4, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12a      	bne.n	8002adc <_scanf_chars+0xa8>
 8002a86:	2001      	movs	r0, #1
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a8c:	f000 fab4 	bl	8002ff8 <__locale_ctype_ptr>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4418      	add	r0, r3
 8002a96:	7843      	ldrb	r3, [r0, #1]
 8002a98:	071b      	lsls	r3, r3, #28
 8002a9a:	d4ef      	bmi.n	8002a7c <_scanf_chars+0x48>
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	06da      	lsls	r2, r3, #27
 8002aa0:	bf5e      	ittt	pl
 8002aa2:	682b      	ldrpl	r3, [r5, #0]
 8002aa4:	781b      	ldrbpl	r3, [r3, #0]
 8002aa6:	703b      	strbpl	r3, [r7, #0]
 8002aa8:	682a      	ldr	r2, [r5, #0]
 8002aaa:	686b      	ldr	r3, [r5, #4]
 8002aac:	f102 0201 	add.w	r2, r2, #1
 8002ab0:	602a      	str	r2, [r5, #0]
 8002ab2:	68a2      	ldr	r2, [r4, #8]
 8002ab4:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ab8:	f102 32ff 	add.w	r2, r2, #4294967295
 8002abc:	606b      	str	r3, [r5, #4]
 8002abe:	f106 0601 	add.w	r6, r6, #1
 8002ac2:	bf58      	it	pl
 8002ac4:	3701      	addpl	r7, #1
 8002ac6:	60a2      	str	r2, [r4, #8]
 8002ac8:	b142      	cbz	r2, 8002adc <_scanf_chars+0xa8>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dcc8      	bgt.n	8002a60 <_scanf_chars+0x2c>
 8002ace:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	4798      	blx	r3
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d0c1      	beq.n	8002a60 <_scanf_chars+0x2c>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f013 0310 	ands.w	r3, r3, #16
 8002ae2:	d105      	bne.n	8002af0 <_scanf_chars+0xbc>
 8002ae4:	68e2      	ldr	r2, [r4, #12]
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	60e2      	str	r2, [r4, #12]
 8002aea:	69a2      	ldr	r2, [r4, #24]
 8002aec:	b102      	cbz	r2, 8002af0 <_scanf_chars+0xbc>
 8002aee:	703b      	strb	r3, [r7, #0]
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	441e      	add	r6, r3
 8002af4:	6126      	str	r6, [r4, #16]
 8002af6:	2000      	movs	r0, #0
 8002af8:	e7c6      	b.n	8002a88 <_scanf_chars+0x54>
	...

08002afc <_scanf_i>:
 8002afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b00:	469a      	mov	sl, r3
 8002b02:	4b74      	ldr	r3, [pc, #464]	; (8002cd4 <_scanf_i+0x1d8>)
 8002b04:	460c      	mov	r4, r1
 8002b06:	4683      	mov	fp, r0
 8002b08:	4616      	mov	r6, r2
 8002b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	ab03      	add	r3, sp, #12
 8002b12:	68a7      	ldr	r7, [r4, #8]
 8002b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <_scanf_i+0x1dc>)
 8002b1a:	69a1      	ldr	r1, [r4, #24]
 8002b1c:	4a6f      	ldr	r2, [pc, #444]	; (8002cdc <_scanf_i+0x1e0>)
 8002b1e:	2903      	cmp	r1, #3
 8002b20:	bf08      	it	eq
 8002b22:	461a      	moveq	r2, r3
 8002b24:	1e7b      	subs	r3, r7, #1
 8002b26:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002b2a:	bf84      	itt	hi
 8002b2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002b30:	60a3      	strhi	r3, [r4, #8]
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002b3a:	bf88      	it	hi
 8002b3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002b40:	f104 091c 	add.w	r9, r4, #28
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bf8c      	ite	hi
 8002b48:	197f      	addhi	r7, r7, r5
 8002b4a:	2700      	movls	r7, #0
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	f04f 0800 	mov.w	r8, #0
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	6831      	ldr	r1, [r6, #0]
 8002b56:	ab03      	add	r3, sp, #12
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002b5e:	7809      	ldrb	r1, [r1, #0]
 8002b60:	f7fd fb3e 	bl	80001e0 <memchr>
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	b330      	cbz	r0, 8002bb6 <_scanf_i+0xba>
 8002b68:	f1b8 0f01 	cmp.w	r8, #1
 8002b6c:	d15a      	bne.n	8002c24 <_scanf_i+0x128>
 8002b6e:	6862      	ldr	r2, [r4, #4]
 8002b70:	b92a      	cbnz	r2, 8002b7e <_scanf_i+0x82>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	2108      	movs	r1, #8
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	6061      	str	r1, [r4, #4]
 8002b7c:	6022      	str	r2, [r4, #0]
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002b84:	6022      	str	r2, [r4, #0]
 8002b86:	68a2      	ldr	r2, [r4, #8]
 8002b88:	1e51      	subs	r1, r2, #1
 8002b8a:	60a1      	str	r1, [r4, #8]
 8002b8c:	b19a      	cbz	r2, 8002bb6 <_scanf_i+0xba>
 8002b8e:	6832      	ldr	r2, [r6, #0]
 8002b90:	1c51      	adds	r1, r2, #1
 8002b92:	6031      	str	r1, [r6, #0]
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	1c5d      	adds	r5, r3, #1
 8002b9a:	6873      	ldr	r3, [r6, #4]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	6073      	str	r3, [r6, #4]
 8002ba2:	dc07      	bgt.n	8002bb4 <_scanf_i+0xb8>
 8002ba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002ba8:	4631      	mov	r1, r6
 8002baa:	4658      	mov	r0, fp
 8002bac:	4798      	blx	r3
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f040 8086 	bne.w	8002cc0 <_scanf_i+0x1c4>
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f108 0801 	add.w	r8, r8, #1
 8002bba:	f1b8 0f03 	cmp.w	r8, #3
 8002bbe:	d1c8      	bne.n	8002b52 <_scanf_i+0x56>
 8002bc0:	6862      	ldr	r2, [r4, #4]
 8002bc2:	b90a      	cbnz	r2, 8002bc8 <_scanf_i+0xcc>
 8002bc4:	220a      	movs	r2, #10
 8002bc6:	6062      	str	r2, [r4, #4]
 8002bc8:	6862      	ldr	r2, [r4, #4]
 8002bca:	4945      	ldr	r1, [pc, #276]	; (8002ce0 <_scanf_i+0x1e4>)
 8002bcc:	6960      	ldr	r0, [r4, #20]
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	1a89      	subs	r1, r1, r2
 8002bd2:	f000 f887 	bl	8002ce4 <__sccl>
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	f04f 0800 	mov.w	r8, #0
 8002bdc:	461d      	mov	r5, r3
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <_scanf_i+0x160>
 8002be6:	6831      	ldr	r1, [r6, #0]
 8002be8:	6960      	ldr	r0, [r4, #20]
 8002bea:	f891 c000 	ldrb.w	ip, [r1]
 8002bee:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d032      	beq.n	8002c5c <_scanf_i+0x160>
 8002bf6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002bfa:	d121      	bne.n	8002c40 <_scanf_i+0x144>
 8002bfc:	0510      	lsls	r0, r2, #20
 8002bfe:	d51f      	bpl.n	8002c40 <_scanf_i+0x144>
 8002c00:	f108 0801 	add.w	r8, r8, #1
 8002c04:	b117      	cbz	r7, 8002c0c <_scanf_i+0x110>
 8002c06:	3301      	adds	r3, #1
 8002c08:	3f01      	subs	r7, #1
 8002c0a:	60a3      	str	r3, [r4, #8]
 8002c0c:	6873      	ldr	r3, [r6, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	6073      	str	r3, [r6, #4]
 8002c14:	dd1b      	ble.n	8002c4e <_scanf_i+0x152>
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	6033      	str	r3, [r6, #0]
 8002c1c:	68a3      	ldr	r3, [r4, #8]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	60a3      	str	r3, [r4, #8]
 8002c22:	e7dc      	b.n	8002bde <_scanf_i+0xe2>
 8002c24:	f1b8 0f02 	cmp.w	r8, #2
 8002c28:	d1ad      	bne.n	8002b86 <_scanf_i+0x8a>
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002c30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002c34:	d1bf      	bne.n	8002bb6 <_scanf_i+0xba>
 8002c36:	2110      	movs	r1, #16
 8002c38:	6061      	str	r1, [r4, #4]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3e:	e7a1      	b.n	8002b84 <_scanf_i+0x88>
 8002c40:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002c44:	6022      	str	r2, [r4, #0]
 8002c46:	780b      	ldrb	r3, [r1, #0]
 8002c48:	702b      	strb	r3, [r5, #0]
 8002c4a:	3501      	adds	r5, #1
 8002c4c:	e7de      	b.n	8002c0c <_scanf_i+0x110>
 8002c4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002c52:	4631      	mov	r1, r6
 8002c54:	4658      	mov	r0, fp
 8002c56:	4798      	blx	r3
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d0df      	beq.n	8002c1c <_scanf_i+0x120>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	05d9      	lsls	r1, r3, #23
 8002c60:	d50c      	bpl.n	8002c7c <_scanf_i+0x180>
 8002c62:	454d      	cmp	r5, r9
 8002c64:	d908      	bls.n	8002c78 <_scanf_i+0x17c>
 8002c66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002c6e:	4632      	mov	r2, r6
 8002c70:	4658      	mov	r0, fp
 8002c72:	4798      	blx	r3
 8002c74:	1e6f      	subs	r7, r5, #1
 8002c76:	463d      	mov	r5, r7
 8002c78:	454d      	cmp	r5, r9
 8002c7a:	d029      	beq.n	8002cd0 <_scanf_i+0x1d4>
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	f012 0210 	ands.w	r2, r2, #16
 8002c82:	d113      	bne.n	8002cac <_scanf_i+0x1b0>
 8002c84:	702a      	strb	r2, [r5, #0]
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	9e00      	ldr	r6, [sp, #0]
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4658      	mov	r0, fp
 8002c8e:	47b0      	blx	r6
 8002c90:	f8da 3000 	ldr.w	r3, [sl]
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	f8ca 2000 	str.w	r2, [sl]
 8002c9c:	f011 0f20 	tst.w	r1, #32
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	d010      	beq.n	8002cc6 <_scanf_i+0x1ca>
 8002ca4:	6018      	str	r0, [r3, #0]
 8002ca6:	68e3      	ldr	r3, [r4, #12]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60e3      	str	r3, [r4, #12]
 8002cac:	eba5 0509 	sub.w	r5, r5, r9
 8002cb0:	44a8      	add	r8, r5
 8002cb2:	6925      	ldr	r5, [r4, #16]
 8002cb4:	4445      	add	r5, r8
 8002cb6:	6125      	str	r5, [r4, #16]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	b007      	add	sp, #28
 8002cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc0:	f04f 0800 	mov.w	r8, #0
 8002cc4:	e7ca      	b.n	8002c5c <_scanf_i+0x160>
 8002cc6:	07ca      	lsls	r2, r1, #31
 8002cc8:	bf4c      	ite	mi
 8002cca:	8018      	strhmi	r0, [r3, #0]
 8002ccc:	6018      	strpl	r0, [r3, #0]
 8002cce:	e7ea      	b.n	8002ca6 <_scanf_i+0x1aa>
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e7f2      	b.n	8002cba <_scanf_i+0x1be>
 8002cd4:	08003284 	.word	0x08003284
 8002cd8:	08002e41 	.word	0x08002e41
 8002cdc:	08002f59 	.word	0x08002f59
 8002ce0:	080032bc 	.word	0x080032bc

08002ce4 <__sccl>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	780b      	ldrb	r3, [r1, #0]
 8002ce8:	2b5e      	cmp	r3, #94	; 0x5e
 8002cea:	bf13      	iteet	ne
 8002cec:	1c4a      	addne	r2, r1, #1
 8002cee:	1c8a      	addeq	r2, r1, #2
 8002cf0:	784b      	ldrbeq	r3, [r1, #1]
 8002cf2:	2100      	movne	r1, #0
 8002cf4:	bf08      	it	eq
 8002cf6:	2101      	moveq	r1, #1
 8002cf8:	1e44      	subs	r4, r0, #1
 8002cfa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002cfe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8002d02:	42ac      	cmp	r4, r5
 8002d04:	d1fb      	bne.n	8002cfe <__sccl+0x1a>
 8002d06:	b913      	cbnz	r3, 8002d0e <__sccl+0x2a>
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	f081 0401 	eor.w	r4, r1, #1
 8002d12:	54c4      	strb	r4, [r0, r3]
 8002d14:	1c51      	adds	r1, r2, #1
 8002d16:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8002d1a:	2d2d      	cmp	r5, #45	; 0x2d
 8002d1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8002d20:	460a      	mov	r2, r1
 8002d22:	d006      	beq.n	8002d32 <__sccl+0x4e>
 8002d24:	2d5d      	cmp	r5, #93	; 0x5d
 8002d26:	d0f0      	beq.n	8002d0a <__sccl+0x26>
 8002d28:	b90d      	cbnz	r5, 8002d2e <__sccl+0x4a>
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	e7ed      	b.n	8002d0a <__sccl+0x26>
 8002d2e:	462b      	mov	r3, r5
 8002d30:	e7ef      	b.n	8002d12 <__sccl+0x2e>
 8002d32:	780e      	ldrb	r6, [r1, #0]
 8002d34:	2e5d      	cmp	r6, #93	; 0x5d
 8002d36:	d0fa      	beq.n	8002d2e <__sccl+0x4a>
 8002d38:	42b3      	cmp	r3, r6
 8002d3a:	dcf8      	bgt.n	8002d2e <__sccl+0x4a>
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	429e      	cmp	r6, r3
 8002d40:	54c4      	strb	r4, [r0, r3]
 8002d42:	dcfb      	bgt.n	8002d3c <__sccl+0x58>
 8002d44:	3102      	adds	r1, #2
 8002d46:	e7e6      	b.n	8002d16 <__sccl+0x32>

08002d48 <_strtol_l.isra.0>:
 8002d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	4689      	mov	r9, r1
 8002d50:	4692      	mov	sl, r2
 8002d52:	461e      	mov	r6, r3
 8002d54:	460f      	mov	r7, r1
 8002d56:	463d      	mov	r5, r7
 8002d58:	9808      	ldr	r0, [sp, #32]
 8002d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d5e:	f000 f947 	bl	8002ff0 <__locale_ctype_ptr_l>
 8002d62:	4420      	add	r0, r4
 8002d64:	7843      	ldrb	r3, [r0, #1]
 8002d66:	f013 0308 	ands.w	r3, r3, #8
 8002d6a:	d132      	bne.n	8002dd2 <_strtol_l.isra.0+0x8a>
 8002d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8002d6e:	d132      	bne.n	8002dd6 <_strtol_l.isra.0+0x8e>
 8002d70:	787c      	ldrb	r4, [r7, #1]
 8002d72:	1cbd      	adds	r5, r7, #2
 8002d74:	2201      	movs	r2, #1
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	d05d      	beq.n	8002e36 <_strtol_l.isra.0+0xee>
 8002d7a:	2e10      	cmp	r6, #16
 8002d7c:	d109      	bne.n	8002d92 <_strtol_l.isra.0+0x4a>
 8002d7e:	2c30      	cmp	r4, #48	; 0x30
 8002d80:	d107      	bne.n	8002d92 <_strtol_l.isra.0+0x4a>
 8002d82:	782b      	ldrb	r3, [r5, #0]
 8002d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002d88:	2b58      	cmp	r3, #88	; 0x58
 8002d8a:	d14f      	bne.n	8002e2c <_strtol_l.isra.0+0xe4>
 8002d8c:	786c      	ldrb	r4, [r5, #1]
 8002d8e:	2610      	movs	r6, #16
 8002d90:	3502      	adds	r5, #2
 8002d92:	2a00      	cmp	r2, #0
 8002d94:	bf14      	ite	ne
 8002d96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002d9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002d9e:	2700      	movs	r7, #0
 8002da0:	fbb1 fcf6 	udiv	ip, r1, r6
 8002da4:	4638      	mov	r0, r7
 8002da6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002daa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d817      	bhi.n	8002de2 <_strtol_l.isra.0+0x9a>
 8002db2:	461c      	mov	r4, r3
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	dd23      	ble.n	8002e00 <_strtol_l.isra.0+0xb8>
 8002db8:	1c7b      	adds	r3, r7, #1
 8002dba:	d007      	beq.n	8002dcc <_strtol_l.isra.0+0x84>
 8002dbc:	4584      	cmp	ip, r0
 8002dbe:	d31c      	bcc.n	8002dfa <_strtol_l.isra.0+0xb2>
 8002dc0:	d101      	bne.n	8002dc6 <_strtol_l.isra.0+0x7e>
 8002dc2:	45a6      	cmp	lr, r4
 8002dc4:	db19      	blt.n	8002dfa <_strtol_l.isra.0+0xb2>
 8002dc6:	fb00 4006 	mla	r0, r0, r6, r4
 8002dca:	2701      	movs	r7, #1
 8002dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dd0:	e7eb      	b.n	8002daa <_strtol_l.isra.0+0x62>
 8002dd2:	462f      	mov	r7, r5
 8002dd4:	e7bf      	b.n	8002d56 <_strtol_l.isra.0+0xe>
 8002dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8002dd8:	bf04      	itt	eq
 8002dda:	1cbd      	addeq	r5, r7, #2
 8002ddc:	787c      	ldrbeq	r4, [r7, #1]
 8002dde:	461a      	mov	r2, r3
 8002de0:	e7c9      	b.n	8002d76 <_strtol_l.isra.0+0x2e>
 8002de2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002de6:	2b19      	cmp	r3, #25
 8002de8:	d801      	bhi.n	8002dee <_strtol_l.isra.0+0xa6>
 8002dea:	3c37      	subs	r4, #55	; 0x37
 8002dec:	e7e2      	b.n	8002db4 <_strtol_l.isra.0+0x6c>
 8002dee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002df2:	2b19      	cmp	r3, #25
 8002df4:	d804      	bhi.n	8002e00 <_strtol_l.isra.0+0xb8>
 8002df6:	3c57      	subs	r4, #87	; 0x57
 8002df8:	e7dc      	b.n	8002db4 <_strtol_l.isra.0+0x6c>
 8002dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8002dfe:	e7e5      	b.n	8002dcc <_strtol_l.isra.0+0x84>
 8002e00:	1c7b      	adds	r3, r7, #1
 8002e02:	d108      	bne.n	8002e16 <_strtol_l.isra.0+0xce>
 8002e04:	2322      	movs	r3, #34	; 0x22
 8002e06:	f8c8 3000 	str.w	r3, [r8]
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	f1ba 0f00 	cmp.w	sl, #0
 8002e10:	d107      	bne.n	8002e22 <_strtol_l.isra.0+0xda>
 8002e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e16:	b102      	cbz	r2, 8002e1a <_strtol_l.isra.0+0xd2>
 8002e18:	4240      	negs	r0, r0
 8002e1a:	f1ba 0f00 	cmp.w	sl, #0
 8002e1e:	d0f8      	beq.n	8002e12 <_strtol_l.isra.0+0xca>
 8002e20:	b10f      	cbz	r7, 8002e26 <_strtol_l.isra.0+0xde>
 8002e22:	f105 39ff 	add.w	r9, r5, #4294967295
 8002e26:	f8ca 9000 	str.w	r9, [sl]
 8002e2a:	e7f2      	b.n	8002e12 <_strtol_l.isra.0+0xca>
 8002e2c:	2430      	movs	r4, #48	; 0x30
 8002e2e:	2e00      	cmp	r6, #0
 8002e30:	d1af      	bne.n	8002d92 <_strtol_l.isra.0+0x4a>
 8002e32:	2608      	movs	r6, #8
 8002e34:	e7ad      	b.n	8002d92 <_strtol_l.isra.0+0x4a>
 8002e36:	2c30      	cmp	r4, #48	; 0x30
 8002e38:	d0a3      	beq.n	8002d82 <_strtol_l.isra.0+0x3a>
 8002e3a:	260a      	movs	r6, #10
 8002e3c:	e7a9      	b.n	8002d92 <_strtol_l.isra.0+0x4a>
	...

08002e40 <_strtol_r>:
 8002e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e42:	4c06      	ldr	r4, [pc, #24]	; (8002e5c <_strtol_r+0x1c>)
 8002e44:	4d06      	ldr	r5, [pc, #24]	; (8002e60 <_strtol_r+0x20>)
 8002e46:	6824      	ldr	r4, [r4, #0]
 8002e48:	6a24      	ldr	r4, [r4, #32]
 8002e4a:	2c00      	cmp	r4, #0
 8002e4c:	bf08      	it	eq
 8002e4e:	462c      	moveq	r4, r5
 8002e50:	9400      	str	r4, [sp, #0]
 8002e52:	f7ff ff79 	bl	8002d48 <_strtol_l.isra.0>
 8002e56:	b003      	add	sp, #12
 8002e58:	bd30      	pop	{r4, r5, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	20000070 	.word	0x20000070

08002e64 <_strtoul_l.isra.0>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	4680      	mov	r8, r0
 8002e6a:	4689      	mov	r9, r1
 8002e6c:	4692      	mov	sl, r2
 8002e6e:	461e      	mov	r6, r3
 8002e70:	460f      	mov	r7, r1
 8002e72:	463d      	mov	r5, r7
 8002e74:	9808      	ldr	r0, [sp, #32]
 8002e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e7a:	f000 f8b9 	bl	8002ff0 <__locale_ctype_ptr_l>
 8002e7e:	4420      	add	r0, r4
 8002e80:	7843      	ldrb	r3, [r0, #1]
 8002e82:	f013 0308 	ands.w	r3, r3, #8
 8002e86:	d130      	bne.n	8002eea <_strtoul_l.isra.0+0x86>
 8002e88:	2c2d      	cmp	r4, #45	; 0x2d
 8002e8a:	d130      	bne.n	8002eee <_strtoul_l.isra.0+0x8a>
 8002e8c:	787c      	ldrb	r4, [r7, #1]
 8002e8e:	1cbd      	adds	r5, r7, #2
 8002e90:	2101      	movs	r1, #1
 8002e92:	2e00      	cmp	r6, #0
 8002e94:	d05c      	beq.n	8002f50 <_strtoul_l.isra.0+0xec>
 8002e96:	2e10      	cmp	r6, #16
 8002e98:	d109      	bne.n	8002eae <_strtoul_l.isra.0+0x4a>
 8002e9a:	2c30      	cmp	r4, #48	; 0x30
 8002e9c:	d107      	bne.n	8002eae <_strtoul_l.isra.0+0x4a>
 8002e9e:	782b      	ldrb	r3, [r5, #0]
 8002ea0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002ea4:	2b58      	cmp	r3, #88	; 0x58
 8002ea6:	d14e      	bne.n	8002f46 <_strtoul_l.isra.0+0xe2>
 8002ea8:	786c      	ldrb	r4, [r5, #1]
 8002eaa:	2610      	movs	r6, #16
 8002eac:	3502      	adds	r5, #2
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	fbb2 f2f6 	udiv	r2, r2, r6
 8002eb8:	fb06 fc02 	mul.w	ip, r6, r2
 8002ebc:	ea6f 0c0c 	mvn.w	ip, ip
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002ec6:	2f09      	cmp	r7, #9
 8002ec8:	d817      	bhi.n	8002efa <_strtoul_l.isra.0+0x96>
 8002eca:	463c      	mov	r4, r7
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	dd23      	ble.n	8002f18 <_strtoul_l.isra.0+0xb4>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db1e      	blt.n	8002f12 <_strtoul_l.isra.0+0xae>
 8002ed4:	4282      	cmp	r2, r0
 8002ed6:	d31c      	bcc.n	8002f12 <_strtoul_l.isra.0+0xae>
 8002ed8:	d101      	bne.n	8002ede <_strtoul_l.isra.0+0x7a>
 8002eda:	45a4      	cmp	ip, r4
 8002edc:	db19      	blt.n	8002f12 <_strtoul_l.isra.0+0xae>
 8002ede:	fb00 4006 	mla	r0, r0, r6, r4
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ee8:	e7eb      	b.n	8002ec2 <_strtoul_l.isra.0+0x5e>
 8002eea:	462f      	mov	r7, r5
 8002eec:	e7c1      	b.n	8002e72 <_strtoul_l.isra.0+0xe>
 8002eee:	2c2b      	cmp	r4, #43	; 0x2b
 8002ef0:	bf04      	itt	eq
 8002ef2:	1cbd      	addeq	r5, r7, #2
 8002ef4:	787c      	ldrbeq	r4, [r7, #1]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	e7cb      	b.n	8002e92 <_strtoul_l.isra.0+0x2e>
 8002efa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002efe:	2f19      	cmp	r7, #25
 8002f00:	d801      	bhi.n	8002f06 <_strtoul_l.isra.0+0xa2>
 8002f02:	3c37      	subs	r4, #55	; 0x37
 8002f04:	e7e2      	b.n	8002ecc <_strtoul_l.isra.0+0x68>
 8002f06:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002f0a:	2f19      	cmp	r7, #25
 8002f0c:	d804      	bhi.n	8002f18 <_strtoul_l.isra.0+0xb4>
 8002f0e:	3c57      	subs	r4, #87	; 0x57
 8002f10:	e7dc      	b.n	8002ecc <_strtoul_l.isra.0+0x68>
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e7e5      	b.n	8002ee4 <_strtoul_l.isra.0+0x80>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da09      	bge.n	8002f30 <_strtoul_l.isra.0+0xcc>
 8002f1c:	2322      	movs	r3, #34	; 0x22
 8002f1e:	f8c8 3000 	str.w	r3, [r8]
 8002f22:	f04f 30ff 	mov.w	r0, #4294967295
 8002f26:	f1ba 0f00 	cmp.w	sl, #0
 8002f2a:	d107      	bne.n	8002f3c <_strtoul_l.isra.0+0xd8>
 8002f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f30:	b101      	cbz	r1, 8002f34 <_strtoul_l.isra.0+0xd0>
 8002f32:	4240      	negs	r0, r0
 8002f34:	f1ba 0f00 	cmp.w	sl, #0
 8002f38:	d0f8      	beq.n	8002f2c <_strtoul_l.isra.0+0xc8>
 8002f3a:	b10b      	cbz	r3, 8002f40 <_strtoul_l.isra.0+0xdc>
 8002f3c:	f105 39ff 	add.w	r9, r5, #4294967295
 8002f40:	f8ca 9000 	str.w	r9, [sl]
 8002f44:	e7f2      	b.n	8002f2c <_strtoul_l.isra.0+0xc8>
 8002f46:	2430      	movs	r4, #48	; 0x30
 8002f48:	2e00      	cmp	r6, #0
 8002f4a:	d1b0      	bne.n	8002eae <_strtoul_l.isra.0+0x4a>
 8002f4c:	2608      	movs	r6, #8
 8002f4e:	e7ae      	b.n	8002eae <_strtoul_l.isra.0+0x4a>
 8002f50:	2c30      	cmp	r4, #48	; 0x30
 8002f52:	d0a4      	beq.n	8002e9e <_strtoul_l.isra.0+0x3a>
 8002f54:	260a      	movs	r6, #10
 8002f56:	e7aa      	b.n	8002eae <_strtoul_l.isra.0+0x4a>

08002f58 <_strtoul_r>:
 8002f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f5a:	4c06      	ldr	r4, [pc, #24]	; (8002f74 <_strtoul_r+0x1c>)
 8002f5c:	4d06      	ldr	r5, [pc, #24]	; (8002f78 <_strtoul_r+0x20>)
 8002f5e:	6824      	ldr	r4, [r4, #0]
 8002f60:	6a24      	ldr	r4, [r4, #32]
 8002f62:	2c00      	cmp	r4, #0
 8002f64:	bf08      	it	eq
 8002f66:	462c      	moveq	r4, r5
 8002f68:	9400      	str	r4, [sp, #0]
 8002f6a:	f7ff ff7b 	bl	8002e64 <_strtoul_l.isra.0>
 8002f6e:	b003      	add	sp, #12
 8002f70:	bd30      	pop	{r4, r5, pc}
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	20000070 	.word	0x20000070

08002f7c <__submore>:
 8002f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	460c      	mov	r4, r1
 8002f82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	d11d      	bne.n	8002fc8 <__submore+0x4c>
 8002f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f90:	f000 f8ac 	bl	80030ec <_malloc_r>
 8002f94:	b918      	cbnz	r0, 8002f9e <__submore+0x22>
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002fa4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8002faa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002fae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002fb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002fb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002fba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8002fbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002fc2:	6020      	str	r0, [r4, #0]
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e7e8      	b.n	8002f9a <__submore+0x1e>
 8002fc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002fca:	0077      	lsls	r7, r6, #1
 8002fcc:	463a      	mov	r2, r7
 8002fce:	f000 f8e7 	bl	80031a0 <_realloc_r>
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0de      	beq.n	8002f96 <__submore+0x1a>
 8002fd8:	eb00 0806 	add.w	r8, r0, r6
 8002fdc:	4601      	mov	r1, r0
 8002fde:	4632      	mov	r2, r6
 8002fe0:	4640      	mov	r0, r8
 8002fe2:	f000 f829 	bl	8003038 <memcpy>
 8002fe6:	f8c4 8000 	str.w	r8, [r4]
 8002fea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002fee:	e7e9      	b.n	8002fc4 <__submore+0x48>

08002ff0 <__locale_ctype_ptr_l>:
 8002ff0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002ff4:	4770      	bx	lr
	...

08002ff8 <__locale_ctype_ptr>:
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__locale_ctype_ptr+0x14>)
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <__locale_ctype_ptr+0x18>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf08      	it	eq
 8003004:	4613      	moveq	r3, r2
 8003006:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800300a:	4770      	bx	lr
 800300c:	2000000c 	.word	0x2000000c
 8003010:	20000070 	.word	0x20000070

08003014 <__ascii_mbtowc>:
 8003014:	b082      	sub	sp, #8
 8003016:	b901      	cbnz	r1, 800301a <__ascii_mbtowc+0x6>
 8003018:	a901      	add	r1, sp, #4
 800301a:	b142      	cbz	r2, 800302e <__ascii_mbtowc+0x1a>
 800301c:	b14b      	cbz	r3, 8003032 <__ascii_mbtowc+0x1e>
 800301e:	7813      	ldrb	r3, [r2, #0]
 8003020:	600b      	str	r3, [r1, #0]
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	1c10      	adds	r0, r2, #0
 8003026:	bf18      	it	ne
 8003028:	2001      	movne	r0, #1
 800302a:	b002      	add	sp, #8
 800302c:	4770      	bx	lr
 800302e:	4610      	mov	r0, r2
 8003030:	e7fb      	b.n	800302a <__ascii_mbtowc+0x16>
 8003032:	f06f 0001 	mvn.w	r0, #1
 8003036:	e7f8      	b.n	800302a <__ascii_mbtowc+0x16>

08003038 <memcpy>:
 8003038:	b510      	push	{r4, lr}
 800303a:	1e43      	subs	r3, r0, #1
 800303c:	440a      	add	r2, r1
 800303e:	4291      	cmp	r1, r2
 8003040:	d100      	bne.n	8003044 <memcpy+0xc>
 8003042:	bd10      	pop	{r4, pc}
 8003044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800304c:	e7f7      	b.n	800303e <memcpy+0x6>
	...

08003050 <_free_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d045      	beq.n	80030e4 <_free_r+0x94>
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f0c      	subs	r4, r1, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	18e4      	addlt	r4, r4, r3
 8003064:	f000 f8df 	bl	8003226 <__malloc_lock>
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <_free_r+0x98>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	4610      	mov	r0, r2
 800306e:	b933      	cbnz	r3, 800307e <_free_r+0x2e>
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	6014      	str	r4, [r2, #0]
 8003074:	4628      	mov	r0, r5
 8003076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307a:	f000 b8d5 	b.w	8003228 <__malloc_unlock>
 800307e:	42a3      	cmp	r3, r4
 8003080:	d90c      	bls.n	800309c <_free_r+0x4c>
 8003082:	6821      	ldr	r1, [r4, #0]
 8003084:	1862      	adds	r2, r4, r1
 8003086:	4293      	cmp	r3, r2
 8003088:	bf04      	itt	eq
 800308a:	681a      	ldreq	r2, [r3, #0]
 800308c:	685b      	ldreq	r3, [r3, #4]
 800308e:	6063      	str	r3, [r4, #4]
 8003090:	bf04      	itt	eq
 8003092:	1852      	addeq	r2, r2, r1
 8003094:	6022      	streq	r2, [r4, #0]
 8003096:	6004      	str	r4, [r0, #0]
 8003098:	e7ec      	b.n	8003074 <_free_r+0x24>
 800309a:	4613      	mov	r3, r2
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	b10a      	cbz	r2, 80030a4 <_free_r+0x54>
 80030a0:	42a2      	cmp	r2, r4
 80030a2:	d9fa      	bls.n	800309a <_free_r+0x4a>
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	1858      	adds	r0, r3, r1
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d10b      	bne.n	80030c4 <_free_r+0x74>
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	4401      	add	r1, r0
 80030b0:	1858      	adds	r0, r3, r1
 80030b2:	4282      	cmp	r2, r0
 80030b4:	6019      	str	r1, [r3, #0]
 80030b6:	d1dd      	bne.n	8003074 <_free_r+0x24>
 80030b8:	6810      	ldr	r0, [r2, #0]
 80030ba:	6852      	ldr	r2, [r2, #4]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	4401      	add	r1, r0
 80030c0:	6019      	str	r1, [r3, #0]
 80030c2:	e7d7      	b.n	8003074 <_free_r+0x24>
 80030c4:	d902      	bls.n	80030cc <_free_r+0x7c>
 80030c6:	230c      	movs	r3, #12
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	e7d3      	b.n	8003074 <_free_r+0x24>
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	1821      	adds	r1, r4, r0
 80030d0:	428a      	cmp	r2, r1
 80030d2:	bf04      	itt	eq
 80030d4:	6811      	ldreq	r1, [r2, #0]
 80030d6:	6852      	ldreq	r2, [r2, #4]
 80030d8:	6062      	str	r2, [r4, #4]
 80030da:	bf04      	itt	eq
 80030dc:	1809      	addeq	r1, r1, r0
 80030de:	6021      	streq	r1, [r4, #0]
 80030e0:	605c      	str	r4, [r3, #4]
 80030e2:	e7c7      	b.n	8003074 <_free_r+0x24>
 80030e4:	bd38      	pop	{r3, r4, r5, pc}
 80030e6:	bf00      	nop
 80030e8:	20000200 	.word	0x20000200

080030ec <_malloc_r>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	1ccd      	adds	r5, r1, #3
 80030f0:	f025 0503 	bic.w	r5, r5, #3
 80030f4:	3508      	adds	r5, #8
 80030f6:	2d0c      	cmp	r5, #12
 80030f8:	bf38      	it	cc
 80030fa:	250c      	movcc	r5, #12
 80030fc:	2d00      	cmp	r5, #0
 80030fe:	4606      	mov	r6, r0
 8003100:	db01      	blt.n	8003106 <_malloc_r+0x1a>
 8003102:	42a9      	cmp	r1, r5
 8003104:	d903      	bls.n	800310e <_malloc_r+0x22>
 8003106:	230c      	movs	r3, #12
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	2000      	movs	r0, #0
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	f000 f88a 	bl	8003226 <__malloc_lock>
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <_malloc_r+0xac>)
 8003114:	6814      	ldr	r4, [r2, #0]
 8003116:	4621      	mov	r1, r4
 8003118:	b991      	cbnz	r1, 8003140 <_malloc_r+0x54>
 800311a:	4c20      	ldr	r4, [pc, #128]	; (800319c <_malloc_r+0xb0>)
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	b91b      	cbnz	r3, 8003128 <_malloc_r+0x3c>
 8003120:	4630      	mov	r0, r6
 8003122:	f000 f863 	bl	80031ec <_sbrk_r>
 8003126:	6020      	str	r0, [r4, #0]
 8003128:	4629      	mov	r1, r5
 800312a:	4630      	mov	r0, r6
 800312c:	f000 f85e 	bl	80031ec <_sbrk_r>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	d124      	bne.n	800317e <_malloc_r+0x92>
 8003134:	230c      	movs	r3, #12
 8003136:	6033      	str	r3, [r6, #0]
 8003138:	4630      	mov	r0, r6
 800313a:	f000 f875 	bl	8003228 <__malloc_unlock>
 800313e:	e7e4      	b.n	800310a <_malloc_r+0x1e>
 8003140:	680b      	ldr	r3, [r1, #0]
 8003142:	1b5b      	subs	r3, r3, r5
 8003144:	d418      	bmi.n	8003178 <_malloc_r+0x8c>
 8003146:	2b0b      	cmp	r3, #11
 8003148:	d90f      	bls.n	800316a <_malloc_r+0x7e>
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	50cd      	str	r5, [r1, r3]
 800314e:	18cc      	adds	r4, r1, r3
 8003150:	4630      	mov	r0, r6
 8003152:	f000 f869 	bl	8003228 <__malloc_unlock>
 8003156:	f104 000b 	add.w	r0, r4, #11
 800315a:	1d23      	adds	r3, r4, #4
 800315c:	f020 0007 	bic.w	r0, r0, #7
 8003160:	1ac3      	subs	r3, r0, r3
 8003162:	d0d3      	beq.n	800310c <_malloc_r+0x20>
 8003164:	425a      	negs	r2, r3
 8003166:	50e2      	str	r2, [r4, r3]
 8003168:	e7d0      	b.n	800310c <_malloc_r+0x20>
 800316a:	428c      	cmp	r4, r1
 800316c:	684b      	ldr	r3, [r1, #4]
 800316e:	bf16      	itet	ne
 8003170:	6063      	strne	r3, [r4, #4]
 8003172:	6013      	streq	r3, [r2, #0]
 8003174:	460c      	movne	r4, r1
 8003176:	e7eb      	b.n	8003150 <_malloc_r+0x64>
 8003178:	460c      	mov	r4, r1
 800317a:	6849      	ldr	r1, [r1, #4]
 800317c:	e7cc      	b.n	8003118 <_malloc_r+0x2c>
 800317e:	1cc4      	adds	r4, r0, #3
 8003180:	f024 0403 	bic.w	r4, r4, #3
 8003184:	42a0      	cmp	r0, r4
 8003186:	d005      	beq.n	8003194 <_malloc_r+0xa8>
 8003188:	1a21      	subs	r1, r4, r0
 800318a:	4630      	mov	r0, r6
 800318c:	f000 f82e 	bl	80031ec <_sbrk_r>
 8003190:	3001      	adds	r0, #1
 8003192:	d0cf      	beq.n	8003134 <_malloc_r+0x48>
 8003194:	6025      	str	r5, [r4, #0]
 8003196:	e7db      	b.n	8003150 <_malloc_r+0x64>
 8003198:	20000200 	.word	0x20000200
 800319c:	20000204 	.word	0x20000204

080031a0 <_realloc_r>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	4607      	mov	r7, r0
 80031a4:	4614      	mov	r4, r2
 80031a6:	460e      	mov	r6, r1
 80031a8:	b921      	cbnz	r1, 80031b4 <_realloc_r+0x14>
 80031aa:	4611      	mov	r1, r2
 80031ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031b0:	f7ff bf9c 	b.w	80030ec <_malloc_r>
 80031b4:	b922      	cbnz	r2, 80031c0 <_realloc_r+0x20>
 80031b6:	f7ff ff4b 	bl	8003050 <_free_r>
 80031ba:	4625      	mov	r5, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c0:	f000 f833 	bl	800322a <_malloc_usable_size_r>
 80031c4:	42a0      	cmp	r0, r4
 80031c6:	d20f      	bcs.n	80031e8 <_realloc_r+0x48>
 80031c8:	4621      	mov	r1, r4
 80031ca:	4638      	mov	r0, r7
 80031cc:	f7ff ff8e 	bl	80030ec <_malloc_r>
 80031d0:	4605      	mov	r5, r0
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d0f2      	beq.n	80031bc <_realloc_r+0x1c>
 80031d6:	4631      	mov	r1, r6
 80031d8:	4622      	mov	r2, r4
 80031da:	f7ff ff2d 	bl	8003038 <memcpy>
 80031de:	4631      	mov	r1, r6
 80031e0:	4638      	mov	r0, r7
 80031e2:	f7ff ff35 	bl	8003050 <_free_r>
 80031e6:	e7e9      	b.n	80031bc <_realloc_r+0x1c>
 80031e8:	4635      	mov	r5, r6
 80031ea:	e7e7      	b.n	80031bc <_realloc_r+0x1c>

080031ec <_sbrk_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4c06      	ldr	r4, [pc, #24]	; (8003208 <_sbrk_r+0x1c>)
 80031f0:	2300      	movs	r3, #0
 80031f2:	4605      	mov	r5, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	f7fd fbbc 	bl	8000974 <_sbrk>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_sbrk_r+0x1a>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	b103      	cbz	r3, 8003206 <_sbrk_r+0x1a>
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	200003a4 	.word	0x200003a4

0800320c <__ascii_wctomb>:
 800320c:	b149      	cbz	r1, 8003222 <__ascii_wctomb+0x16>
 800320e:	2aff      	cmp	r2, #255	; 0xff
 8003210:	bf85      	ittet	hi
 8003212:	238a      	movhi	r3, #138	; 0x8a
 8003214:	6003      	strhi	r3, [r0, #0]
 8003216:	700a      	strbls	r2, [r1, #0]
 8003218:	f04f 30ff 	movhi.w	r0, #4294967295
 800321c:	bf98      	it	ls
 800321e:	2001      	movls	r0, #1
 8003220:	4770      	bx	lr
 8003222:	4608      	mov	r0, r1
 8003224:	4770      	bx	lr

08003226 <__malloc_lock>:
 8003226:	4770      	bx	lr

08003228 <__malloc_unlock>:
 8003228:	4770      	bx	lr

0800322a <_malloc_usable_size_r>:
 800322a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800322e:	1f18      	subs	r0, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	bfbc      	itt	lt
 8003234:	580b      	ldrlt	r3, [r1, r0]
 8003236:	18c0      	addlt	r0, r0, r3
 8003238:	4770      	bx	lr
	...

0800323c <_init>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	bf00      	nop
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr

08003248 <_fini>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr
